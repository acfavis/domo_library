[
  {
    "objectID": "utils/dictdot.html",
    "href": "utils/dictdot.html",
    "title": "DictDot",
    "section": "",
    "text": "DictDot\n\n DictDot (dictionary:dict, **kwargs)\n\na utility class that converts json into an object that supports data retrieval with dot notation\n\n\n\n\nType\nDetails\n\n\n\n\ndictionary\ndict\ndictionary to convert\n\n\nkwargs\n\n\n\n\n\n\nsample implementation of DictDot\n\nfoo = { \"name\": \"my object\", \"description\" : \"please convert me\", \"type\": \"a good old fashioned dictionary\"}\n\ndd = DictDot(foo)\n\nprint(dd)\n\ndd.type\n\nDictDot(name='my object', description='please convert me', type='a good old fashioned dictionary')\n\n\n'a good old fashioned dictionary'"
  },
  {
    "objectID": "utils/utils.convert.html",
    "href": "utils/utils.convert.html",
    "title": "Conversion utility functions",
    "section": "",
    "text": "convert_epoch_millisecond_to_datetime\n\n convert_epoch_millisecond_to_datetime (epoch:int)\n\nconvert Epoch time with miliseconds to Date time\n\n\n\nconvert_datetime_to_epoch_millisecond\n\n convert_datetime_to_epoch_millisecond (datetime:datetime.datetime)\n\nconvert DateTime to Epoch time with Miliseconds\n\nimport time\nimport datetime as dt \n\ncur_time = int(time.time()*1000)\n\ncur_datetime =  convert_epoch_millisecond_to_datetime(cur_time)\nprint(cur_datetime)\n\ntest_time = convert_datetime_to_epoch_millisecond(cur_datetime)\nprint(test_time)\n\nfctest.test_eq(test_time, cur_time)\n\n2023-01-24 21:09:05.717000\n1674594545717\n\n\n\n\n\nconvert_snake_to_pascal\n\n convert_snake_to_pascal (str)\n\nconverts ‚Äòsnake_case_str‚Äô to ‚ÄòsnakeCaseStr‚Äô\n\nconvert_str = 'test_snake_case'\n\nconvert_snake_to_pascal(convert_str)\n\n'testSnakeCase'"
  },
  {
    "objectID": "integrations/domojupyter.html#get-domains-with-global-config-deprecated",
    "href": "integrations/domojupyter.html#get-domains-with-global-config-deprecated",
    "title": "DomoJupyter (GetInstanceCredentials)",
    "section": "Get Domains with Global Config (DEPRECATED)",
    "text": "Get Domains with Global Config (DEPRECATED)\nUse this method to configure a dataset that retrieves a list of domains from a config instance (using config credentials) and then includes a global_auth or global_exception_auth for each retrieved domo_instance which will be used to configure the instance.\nTheoretically, the global user should be an Admin alreado Domo‚Äôed to the instance\nThe Config Dataset must return columns domo_instance and config_exception_pw\nNOTE: this method works as designed, but get_domains_with_instance_auth method is more flexible as it supports more variations by using an Enum class for matching.\n\n\nGetInstanceConfig.get_domains_with_global_config_auth\n\n GetInstanceConfig.get_domains_with_global_config_auth\n                                                        (config_dataset_id\n                                                        :str, config_auth:\n                                                        domolibrary.client\n                                                        .DomoAuth.DomoAuth\n                                                        , global_auth:domo\n                                                        library.client.Dom\n                                                        oAuth.DomoAuth, gl\n                                                        obal_exception_aut\n                                                        h:domolibrary.clie\n                                                        nt.DomoAuth.DomoAu\n                                                        th, config_sql:str\n                                                        ='select domain as\n                                                        domo_instance, con\n                                                        fig_exception_pw\n                                                        from table', debug\n                                                        _api:bool=False, d\n                                                        ebug_log:bool=Fals\n                                                        e, debug_prn:bool=\n                                                        False, logger:domo\n                                                        library.client.Log\n                                                        ger.Logger=None)\n\n\n\n\nGetDomains_Query_Exception_PW_Col_Error\n\n GetDomains_Query_Exception_PW_Col_Error (sql:str=None,\n                                          domo_instance:str=None,\n                                          message:str=None)\n\nraise if SQL query fails to return column named ‚Äòconfig_exception_pw‚Äô\n\nsample implementation of get_domains_with_global_config_auth\n\nimport os\n\nconfig_auth = dmda.DomoTokenAuth(\n    domo_instance='domo-dojo', domo_access_token=os.environ['DOMO_DOJO_ACCESS_TOKEN'])\n\nglobal_auth = dmda.DomoTokenAuth(\n    domo_instance='domo-global', domo_access_token=os.environ['DOMO_DOJO_ACCESS_TOKEN'])\n\nglobal_exception_auth = dmda.DomoTokenAuth(\n    domo_instance='domo-global', domo_access_token=os.environ['DOMO_DOJO_ACCESS_TOKEN'])\n\n\nlogger = lc.Logger(app_name='test_retrieve_company')\n\nres = await GetInstanceConfig.get_domains_with_global_config_auth(config_auth=config_auth,\n                                                            config_dataset_id='8d2a8055-7918-4039-b67d-361647e96ea8',\n                                                                  config_sql='SELECT domain as domo_instance, 1 as config_exception_pw  from Table',\n                               debug_prn=True,\n                               debug_log=False,\n                               debug_api=False,\n                               logger=logger,\n                               global_auth = global_auth,\n                                                                  global_exception_auth=global_exception_auth\n                               )\n\npd.DataFrame(res)\n# pd.DataFrame(logger.logs)\n\nResponseGetData(status=200, response={'id': '8d2a8055-7918-4039-b67d-361647e96ea8', 'displayType': 'webform', 'dataProviderType': 'webform', 'type': 'webform', 'name': 'jw_test_domains', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1673978000000, 'lastTouched': 1673991021000, 'lastUpdated': 1673991020570, 'rowCount': 1, 'columnCount': 2, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 876, 'transportType': 'WEBFORM', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\n‚öôÔ∏è START - Retrieving company list \nhttps://domo-dojo.domo.com/datasources/8d2a8055-7918-4039-b67d-361647e96ea8/details/overview using \nSELECT domain as domo_instance, 1 as config_exception_pw  from Table\n\n‚öôÔ∏è SUCCESS üéâ Retrieved company list \nThere are 1 companies to update\n\n\n\n\n\n\n  \n    \n      \n      domo_instance\n      config_exception_pw\n      is_valid\n      instance_auth\n    \n  \n  \n    \n      0\n      domo-dojo\n      1\n      1.0\n      DomoTokenAuth(domo_instance='domo-dojo', token..."
  },
  {
    "objectID": "integrations/domojupyter.html#get-domains-with-instance-config",
    "href": "integrations/domojupyter.html#get-domains-with-instance-config",
    "title": "DomoJupyter (GetInstanceCredentials)",
    "section": "Get Domains with Instance Config",
    "text": "Get Domains with Instance Config\nUse this method to configure a dataset that retrieves a list of domains from a config instance (using config credentials). Pass an auth_enum object to enumerate different authenticaiton variations to expect in the result dataset (see example).\nTheoretically, each of the enumerated auth variations should already exist in the instance.\nThe Config Dataset must return columns domo_instance and auth_match_col\n\n\nGetInstanceConfig.get_domains_with_instance_auth\n\n GetInstanceConfig.get_domains_with_instance_auth (config_dataset_id:str,\n                                                   config_auth:domolibrary\n                                                   .client.DomoAuth.DomoAu\n                                                   th, default_auth:domoli\n                                                   brary.client.DomoAuth.D\n                                                   omoAuth,\n                                                   auth_enum:enum.Enum,\n                                                   config_sql:str=\"select\n                                                   domain as domo_instance\n                                                   ,concat(config_useprod,\n                                                   '-', project) as\n                                                   auth_match_col from\n                                                   table\",\n                                                   debug_api:bool=False,\n                                                   debug_log:bool=False,\n                                                   debug_prn:bool=False, l\n                                                   ogger:Optional[domolibr\n                                                   ary.client.Logger.Logge\n                                                   r]=None)\n\n\n\n\nGetDomains_Query_AuthMatch_Error\n\n GetDomains_Query_AuthMatch_Error (sql:str=None, domo_instance:str=None,\n                                   message:str=None)\n\nraise if SQL query fails to return column named ‚Äòauth_match_col‚Äô\n\nsample implementation of get_domains_with_instance_auth\n\nimport os\n\nconfig_auth = dmda.DomoTokenAuth(\n    domo_instance='domo-dojo', domo_access_token=os.environ['DOMO_DOJO_ACCESS_TOKEN'])\n\ndefault_auth = dmda.DomoTokenAuth(\n    domo_instance='default', domo_access_token=os.environ['DOMO_DOJO_ACCESS_TOKEN'])\n\n\nclass AuthEnum(Enum):\n    test_1 = dmda.DomoTokenAuth(\n        domo_instance='test_1', domo_access_token=os.environ['DOMO_DOJO_ACCESS_TOKEN'])\n    test_0 = dmda.DomoTokenAuth(\n        domo_instance='test_0', domo_access_token=os.environ['DOMO_DOJO_ACCESS_TOKEN'])\n\n\nlogger = lc.Logger(app_name='test_retrieve_company')\n\nres = await GetInstanceConfig.get_domains_with_instance_auth(config_auth=config_auth,\n                                                             config_dataset_id='8d2a8055-7918-4039-b67d-361647e96ea8',\n                                                             config_sql=\"SELECT domain as domo_instance, 'test_1' as auth_match_col from Table\",\n                                                             debug_prn=True,\n                                                             debug_log=False,\n                                                             debug_api=False,\n                                                             logger=logger,\n                                                             default_auth = default_auth,\n                                                             auth_enum=AuthEnum\n                                                             )\n\npd.DataFrame(res)\n# pd.DataFrame(logger.logs)\n\nResponseGetData(status=200, response={'id': '8d2a8055-7918-4039-b67d-361647e96ea8', 'displayType': 'webform', 'dataProviderType': 'webform', 'type': 'webform', 'name': 'jw_test_domains', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1673978000000, 'lastTouched': 1673991021000, 'lastUpdated': 1673991020570, 'rowCount': 1, 'columnCount': 2, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 876, 'transportType': 'WEBFORM', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\n‚öôÔ∏è START - Retrieving company list \nhttps://domo-dojo.domo.com/datasources/8d2a8055-7918-4039-b67d-361647e96ea8/details/overview using \nSELECT domain as domo_instance, 'test_1' as auth_match_col from Table\n\n‚öôÔ∏è SUCCESS üéâ Retrieved company list \nThere are 1 companies to update\n\n\n\n\n\n\n  \n    \n      \n      domo_instance\n      auth_match_col\n      is_valid\n      instance_auth\n    \n  \n  \n    \n      0\n      domo-dojo\n      test_1\n      1.0\n      DomoTokenAuth(domo_instance='domo-dojo', token..."
  },
  {
    "objectID": "classes/domouser.html",
    "href": "classes/domouser.html",
    "title": "User",
    "section": "",
    "text": "DomoUser (id:str, display_name:str=None, email_address:str=None,\n           role_id:str=None, publisher_domain:str=None,\n           subscriber_domain:str=None, virtual_user_id:str=None,\n           auth:Optional[domolibrary.client.DomoAuth.DomoAuth]=None)\n\na class for interacting with a Domo User\n\n\n\n\n\n DomoUser.reset_password (new_password:str, debug_api:bool=False)\n\nreset your password, will respect password restrictions set up in the Domo UI\n\n\n\n\n\n DomoUser.request_password_reset (domo_instance:str, email:str,\n                                  locale:str='en-us',\n                                  debug_api:bool=False)\n\nrequest password reset email. Note: does not require authentication.\n\n\n\n\n\n DomoUser.set_user_landing_page (page_id:str, user_id:str=None,\n                                 auth:domolibrary.client.DomoAuth.DomoAuth\n                                 =None, debug_api:bool=False)\n\n\n\n\n\n\n DomoUser.create_user (auth:domolibrary.client.DomoAuth.DomoAuth,\n                       display_name, email, role_id, password:str=None,\n                       send_password_reset_email:bool=False,\n                       debug:bool=False, log_results:bool=False)\n\nclass method that creates a new Domo user"
  },
  {
    "objectID": "classes/domouser.html#search-by-email",
    "href": "classes/domouser.html#search-by-email",
    "title": "User",
    "section": "Search by Email",
    "text": "Search by Email\n\n\nDomoUsers.by_email\n\n DomoUsers.by_email (user_email_ls:list,\n                     auth:domolibrary.client.DomoAuth.DomoAuth,\n                     only_allow_one:bool=True, debug_api:bool=False,\n                     return_raw:bool=False)\n\n\n\n\nDomoUsers.util_match_users_obj_to_emails\n\n DomoUsers.util_match_users_obj_to_emails (user_ls:list[dict],\n                                           user_email_ls:list[str])\n\npass in an array of user emails to match against an array of Domo User\n\n\n\nDomoUsers.util_match_domo_users_to_emails\n\n DomoUsers.util_match_domo_users_to_emails\n                                            (domo_users:list[__main__.Domo\n                                            User],\n                                            user_email_ls:list[str])\n\npass in an array of user emails to match against an array of Domo User\n\nsample implementation of searching for a user by email\n\nimport os\nimport pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\n\nres = await DomoUsers.by_email(\n    auth=token_auth,\n    user_email_ls=[\"jae@onyxreporting.com\", \"marcanton.clavel@domo.com\"],\n    only_allow_one=False,\n    return_raw=False,\n    debug_api=False,\n)\n\nprint(res)\n\n[DomoUser(id='1893952720', display_name='Jae Wilson', email_address='jae@onyxreporting.com', role_id=1, publisher_domain=None, subscriber_domain=None, virtual_user_id=None), DomoUser(id='1006847540', display_name='Marc-Anton Clavel', email_address='marcanton.clavel@domo.com', role_id=2, publisher_domain=None, subscriber_domain=None, virtual_user_id=None)]\n\n\n\n\n\n\nDomoUsers.virtual_user_by_subscriber_instance\n\n DomoUsers.virtual_user_by_subscriber_instance\n                                                (subscriber_instance_ls:st\n                                                r, auth:domolibrary.client\n                                                .DomoAuth.DomoAuth,\n                                                debug_api:bool=False,\n                                                return_raw:bool=False)\n\n\nsample implementation of retrieving virtual users for a subscriber instance\n\nimport os\nimport pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\n\nres = await DomoUsers.virtual_user_by_subscriber_instance(\n    auth=token_auth,\n    subscriber_instance_ls=[\"domo-dojo\", \"test\"],\n    # return_raw=True,\n    debug_api=False,\n)\nprint(res)\n\nDomoUser(id='2bcabab7-128e-4f47-8219-c8548588d7fc', display_name=None, email_address=None, role_id=None, publisher_domain='domo-dojo.domo.com', subscriber_domain='domo-dojo.domo.com', virtual_user_id='fc:ce69e5f0-ab88-46df-94ab-32b5f6dfd4e7')"
  },
  {
    "objectID": "classes/domoactivitylog.html",
    "href": "classes/domoactivitylog.html",
    "title": "Activity Log",
    "section": "",
    "text": "class ActivityLog_ObjectType(Enum):\n    \"\"\"enumerates valid object types to pass to activity log api\"\"\"\n\n    ACCESS_TOKEN = \"ACCESS_TOKEN\"\n    ACCOUNT = \"ACCOUNT\"\n    ACTIVITY_LOG = \"ACTIVITY_LOG\"\n    ALERT = \"ALERT\"\n    APP = \"APP\"\n    APPDB_COLLECTION = \"MAGNUM_COLLECTION\"\n    APPDB_DATASTORE = \"MAGNUM_DATASTORE\"\n    AUTHORITY = \"AUTHORITY\"\n    BEAST_MODE_FORMULA = \"BEAST_MODE_FORMULA\"\n    BUZZ_CHANNEL = \"CHANNEL\"\n    BUZZ_GROUP_CHAT = \"GROUP_CHAT\"\n    BUZZ_THREAD = \"HUDDLE\"\n    CARD = \"CARD\"\n    CHART_COLOR_PALETTE = \"CHART_COLOR_PALETTE\"\n    COLLECTION = \"COLLECTION\"\n    CUSTOMER = \"CUSTOMER\"\n    CUSTOMER_STATE = \"CUSTOMER_STATE\"\n    CUSTOMER_TIER = \"CUSTOMER_TIER\"\n    DATA_SCIENCE_NOTEBOOK = \"DATA_SCIENCE_NOTEBOOK\"\n    DATAFLOW = \"DATAFLOW_TYPE\"\n    DATASET = \"DATA_SOURCE\"\n    DATASOURCE = \"DATASOURCE\"\n    DEPLOYMENT = \"DEPLOYMENT\"\n    DRILL_VIEW = \"DRILL_VIEW\"\n    EASY_INVITE_LINK = \"EASY_INVITE_LINK\"\n    ENABLED = \"ENABLED\"\n    FILE = \"FILE\"\n    FILE_VERSION = \"FILE_REVISION\"\n    GROUP = \"GROUP\"\n    LICENSE_PAGE = \"LICENSE_PAGE\"\n    LOGIN_SETTINGS = \"LOGIN_SETTINGS\"\n    NAME = \"NAME\"\n    PDP_FILTER = \"ADC_FILTER\"\n    PDP_POLICY = \"ADC_POLICY\"\n    PAGE = \"PAGE\"\n    PAGE_ANALYZER = \"PAGE_ANALYZER\"\n    PAGE_COLLECTION = \"PAGE_COLLECTION\"\n    PROJECT = \"PROJECT\"\n    PROJECT_LIST = \"PROJECT_LIST\"\n    PROJECT_TASK = \"PROJECT_TASK\"\n    PROJECT_TASK_ATTACHMENT = \"PROJECT_TASK_ATTACHMENT\"\n    PROJECT_TASK_OWNER = \"PROJECT_TASK_OWNER\"\n    PROXIER_EMAIL = \"PROXIER_EMAIL\"\n    PUBLIC_EMBED_URL = \"PUBLIC_URL\"\n    PUBLICATION = \"PUBLICATION\"\n    REPOSITORY = \"REPOSITORY\"\n    REPOSITORY_AUTHORIZATION = \"REPOSITORY_AUTHORIZATION\"\n    ROLE = \"ROLE\"\n    SEGMENT = \"SEGMENT\"\n    SSO_PAGE = \"SSO_PAGE\"\n    SUBSCRIBER = \"PROXY_USER\"\n    USER = \"USER\"\n    USER_STATE = \"USER_STATE\"\n    VARIABLE = \"VARIABLE\"\n    VARIABLE_CONTROL = \"VARIABLE_CONTROL\"\n    NOTEBOOK_VIEW = \"CONTAINER_VIEW\"\n    VIEW = \"VIEW\"\n    VIRTUAL_USER = \"VIRTUAL_USER\"\n    WORKBENCH_AGENT = \"Workbench_AGENT\"\n    WORKBENCH_JOB = \"Workbench_JOB\"\n    WORKBENCH_SCHEDULE = \"Workbench_SCHEDULE\"\n\n\n\nActivityLog_ObjectType\n\n ActivityLog_ObjectType (value, names=None, module=None, qualname=None,\n                         type=None, start=1)\n\nenumerates valid object types to pass to activity log api\nTo get an updated list of objectTypes run the get_activity_log_object_types function.\nNote: in the ActivityLog_ObjectType enum, some of the entries have been renamed for clarity.\n\n\n\nDomoActivityLog\n\n DomoActivityLog ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nimport os\nimport pandas as pd\nimport datetime as dt\n\nend_datetime = dt.datetime.today()\nstart_datetime = end_datetime - dt.timedelta(days=100)\n\ntoken_auth = dmda.DomoTokenAuth(domo_instance='domo-dojo',\n                                    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"])\n\nal_res = await DomoActivityLog.get_activity_log(\n    auth = token_auth,\n    start_time = start_datetime,\n    end_time = end_datetime,\n    object_type = ActivityLog_ObjectType.ACTIVITY_LOG,\n    maximum =5)\n\npd.DataFrame(al_res)\n\n\n\n\n\n  \n    \n      \n      userName\n      userId\n      userType\n      actorName\n      actorId\n      actionType\n      objectName\n      objectId\n      objectType\n      additionalComment\n      time\n      eventText\n      clientId\n      time_dt\n      date\n    \n  \n  \n    \n      0\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      UPDATED\n      domo_kbs\n      04c1574e-c8be-4721-9846-c6ffa491144b\n      DATA_SOURCE\n      Jae Wilson updated DataSet domo_kbs.\n      1674594533316\n      Updated DataSet\n      None\n      2023-01-24 21:08:53.316\n      2023-01-24\n    \n    \n      1\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      UPDATED\n      domo_kbs\n      04c1574e-c8be-4721-9846-c6ffa491144b\n      DATA_SOURCE\n      Jae Wilson updated DataSet domo_kbs.\n      1674594524221\n      Updated DataSet\n      None\n      2023-01-24 21:08:44.221\n      2023-01-24\n    \n    \n      2\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      LOGGEDIN\n      \n      \n      \n      Jae Wilson logged in. Logged in from IP addres...\n      1674594524209\n      Logged in\n      None\n      2023-01-24 21:08:44.209\n      2023-01-24\n    \n    \n      3\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      LOGGEDIN\n      \n      \n      \n      Jae Wilson logged in. Logged in from IP addres...\n      1674594523613\n      Logged in\n      None\n      2023-01-24 21:08:43.613\n      2023-01-24\n    \n    \n      4\n      test12@domo.com\n      test12@domo.com\n      USER\n      \n      0\n      FAILED_LOGIN\n      \n      \n      \n      test12@domo.com failed logging in. Logged in f...\n      1674594521985\n      Failed login\n      None\n      2023-01-24 21:08:41.985\n      2023-01-24"
  },
  {
    "objectID": "classes/domodataset.html",
    "href": "classes/domodataset.html",
    "title": "Dataset",
    "section": "",
    "text": "The DomoDataset_Schema class will be a subclass of DomoDataset. It will handle all of the methods for interacting with schemas.\n\nIn execution, the schema is separate from the data that gets uploaded from Vault to Adrenaline. The domo schema defines how the data is loaded into Vault.\nBe cognizant to match dataset uploads with schema definitions. If the schema and uploaded data types do not match, the dataset may be unable to index in Adrenaline (and therefore not update).\n\n\n\n\n\n DomoDataset_Schema (dataset:<built-infunctionany>=None,\n                     columns:List[__main__.DomoDataset_Schema_Column]=<fac\n                     tory>)\n\nclass for interacting with dataset schemas\n\n\n\n\n\n DomoDataset_Schema_Column (name:str, id:str, type:str)\n\n\n\n\n\n\n DatasetSchema_DatasetNotProvidedError ()\n\nreturn if DatasetSchema request does not have a dataset id\n\n\n\n\n\n DatasetSchema_AuthNotProvidedError (dataset_id)\n\nreturn if DatasetSchema request cannot access an auth object\n\n\n\n\n\n DomoDataset_Schema.get\n                         (auth:Optional[domolibrary.client.DomoAuth.DomoAu\n                         th]=None, dataset_id:str=None,\n                         debug_api:bool=False, return_raw_res:bool=False)\n\nmethod that retrieves schema for a dataset\n\n\nStandard implementation will be to access the DomoDataset_Schema class as the DomoDataset.schema property\n\nimport os\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nds_schema = DomoDataset_Schema()\n\nawait ds_schema.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\n[DomoDataset_Schema_Column(name='objectID', id='objectID', type='STRING'),\n DomoDataset_Schema_Column(name='url', id='url', type='STRING'),\n DomoDataset_Schema_Column(name='Title', id='Title', type='STRING'),\n DomoDataset_Schema_Column(name='article', id='article', type='STRING'),\n DomoDataset_Schema_Column(name='views', id='views', type='LONG'),\n DomoDataset_Schema_Column(name='created_dt', id='created_dt', type='DATETIME'),\n DomoDataset_Schema_Column(name='published_dt', id='published_dt', type='DATETIME')]\n\n\n\n\n\n\n\n\n DomoDataset_Tags (dataset:<built-infunctionany>=None,\n                   tag_ls:List[str]=<factory>)\n\nclass for interacting with dataset tags\n\n\n\n\n\n DatasetTags_SetTagsError (dataset_id, domo_instance)\n\nreturn if DatasetTags request is not successfull\n\n\n\n\n\n DatasetTags_AuthNotProvidedError (id)\n\nreturn if DatasetTags request cannot access an auth object\n\nimport os\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nds_tag = DomoDataset_Tags()\nawait ds_tag.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\nResponseGetData(status=200, response={'id': '04c1574e-c8be-4721-9846-c6ffa491144b', 'displayType': 'domo-jupyterdata', 'dataProviderType': 'domo-jupyterdata', 'type': 'Jupyter', 'name': 'domo_kbs', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1668379680000, 'lastTouched': 1668385822000, 'lastUpdated': 1668385822045, 'rowCount': 1185, 'columnCount': 7, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 825, 'transportType': 'API', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'tags': '[\"developer_documentation\",\"hackercore\"]', 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\n\n\n['developer_documentation', 'hackercore']\n\n\n\nimport os\nimport datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\ntoday = dt.datetime.now().strftime(\"%b-%d-%Y %H:%M\")\n\nds_tag = DomoDataset_Tags()\nawait ds_tag.set(\n    auth=token_auth,\n    dataset_id=os.environ[\"DOJO_DATASET_ID\"],\n    tag_ls=[\"developer_documentation\", \"hackercore\", today],\n)\n\nResponseGetData(status=200, response={'id': '04c1574e-c8be-4721-9846-c6ffa491144b', 'displayType': 'domo-jupyterdata', 'dataProviderType': 'domo-jupyterdata', 'type': 'Jupyter', 'name': 'domo_kbs', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1668379680000, 'lastTouched': 1668385822000, 'lastUpdated': 1668385822045, 'rowCount': 1185, 'columnCount': 7, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 825, 'transportType': 'API', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'tags': '[\"Jan-24-2023 21:09\",\"developer_documentation\",\"hackercore\"]', 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\n\n\n['Jan-24-2023 21:09', 'developer_documentation', 'hackercore']\n\n\n\n\n\n\n\n DomoDataset_Tags.add (add_tag_ls:[<class'str'>], dataset_id:str=None,\n                       auth:Optional[domolibrary.client.DomoAuth.DomoAuth]\n                       =None, debug_api:bool=False, session:Optional[aioht\n                       tp.client.ClientSession]=None)\n\nappends tags to the list of existing dataset_tags\n\nimport os\nimport datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\ntoday_year = dt.datetime.today().strftime(\"%Y\")\nds_tag = DomoDataset_Tags()\nawait ds_tag.add(\n    auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"], add_tag_ls=[today_year]\n)\n\nResponseGetData(status=200, response={'id': '04c1574e-c8be-4721-9846-c6ffa491144b', 'displayType': 'domo-jupyterdata', 'dataProviderType': 'domo-jupyterdata', 'type': 'Jupyter', 'name': 'domo_kbs', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1668379680000, 'lastTouched': 1668385822000, 'lastUpdated': 1668385822045, 'rowCount': 1185, 'columnCount': 7, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 825, 'transportType': 'API', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'tags': '[\"Jan-24-2023 21:09\",\"developer_documentation\",\"hackercore\"]', 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\nResponseGetData(status=200, response={'id': '04c1574e-c8be-4721-9846-c6ffa491144b', 'displayType': 'domo-jupyterdata', 'dataProviderType': 'domo-jupyterdata', 'type': 'Jupyter', 'name': 'domo_kbs', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1668379680000, 'lastTouched': 1668385822000, 'lastUpdated': 1668385822045, 'rowCount': 1185, 'columnCount': 7, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 825, 'transportType': 'API', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'tags': '[\"Jan-24-2023 21:09\",\"2023\",\"developer_documentation\",\"hackercore\"]', 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\n\n\n['Jan-24-2023 21:09', '2023', 'developer_documentation', 'hackercore']\n\n\n\n\n\n\n\n DomoDataset_Tags.remove (remove_tag_ls:[<class'str'>],\n                          dataset_id:str=None, auth:domolibrary.client.Dom\n                          oAuth.DomoFullAuth=None, debug_api:bool=False, s\n                          ession:Optional[aiohttp.client.ClientSession]=No\n                          ne)\n\nremoves tags from the existing list of dataset_tags\n\nimport os\nimport datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\ntoday_year = dt.datetime.today().strftime(\"%Y\")\n\nds_tag = DomoDataset_Tags()\n\nawait ds_tag.remove(\n    auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"], remove_tag_ls=[ today_year])\n\nResponseGetData(status=200, response={'id': '04c1574e-c8be-4721-9846-c6ffa491144b', 'displayType': 'domo-jupyterdata', 'dataProviderType': 'domo-jupyterdata', 'type': 'Jupyter', 'name': 'domo_kbs', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1668379680000, 'lastTouched': 1668385822000, 'lastUpdated': 1668385822045, 'rowCount': 1185, 'columnCount': 7, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 825, 'transportType': 'API', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'tags': '[\"Jan-24-2023 21:09\",\"2023\",\"developer_documentation\",\"hackercore\"]', 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\nResponseGetData(status=200, response={'id': '04c1574e-c8be-4721-9846-c6ffa491144b', 'displayType': 'domo-jupyterdata', 'dataProviderType': 'domo-jupyterdata', 'type': 'Jupyter', 'name': 'domo_kbs', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1668379680000, 'lastTouched': 1668385822000, 'lastUpdated': 1668385822045, 'rowCount': 1185, 'columnCount': 7, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 825, 'transportType': 'API', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'tags': '[\"Jan-24-2023 21:09\",\"developer_documentation\",\"hackercore\"]', 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\n\n\n['Jan-24-2023 21:09', 'developer_documentation', 'hackercore']"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "",
    "text": "This is a framework for managing data distribution within an organization that has several departments using standalone instances of domo.\ndomo-accounting.domo.com\ndomo-sales.domo.com\ndomo-marketing.domo.com\ndomo-engineering.domo.com\nThere are several highly bespoke datastores that provide high value data to different departments, they‚Äôll have their own instances of domo too.\ndomo-aa.domo.com\ndomo-sfdc.domo.com\ndomo-snowflake.domo.com\nWe need a single place where users can find trusted dashboards builton a consistent and validated data pipeline that will consume input datasets from different departments or a chain of transformed datasets.\nEx. The executive dashboard gets prepared by domo-engineering but consumes data from accounting, sales, and marketing."
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#types-of-datasets-and-which-ones-we-publish",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#types-of-datasets-and-which-ones-we-publish",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "4 Types of Datasets and Which ones we Publish",
    "text": "4 Types of Datasets and Which ones we Publish"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#non-publishable-datasets",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#non-publishable-datasets",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "Non-publishable Datasets",
    "text": "Non-publishable Datasets\nAvoid publishing datasets that require additional lookups or external data to understand.\n\nRaw Datasets\n\n\nCome straight from the source system.\nMinimize ETL during Ingest.\n\n\nStaging Dataset (INT)\n\n\nExist exclusively in Department or Clearinghouse instances.\nRepresent intermediate steps required to transform a dataset into a usable shape.\nThis will include dimension tables that are not golden records"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#publishable-datasets",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#publishable-datasets",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "Publishable Datasets",
    "text": "Publishable Datasets\nWe promote the publishing of datasets that can stand on their own and do not require additional context to understand.\n\nData Warehouse (DWH)\n\n\nThe building blocks (inputs) to DASH datasets\n\nither facts or dimensional tables that have NOT been shaped for a specific analytic use case.\n\nDo not publish cards or dashboards built on DWH datasets.\nFact tables can take the form of transactional, accumulating snapshot, periodic balance.\nPeriod and accumulating snapshots should be avoided unless there‚Äôs a tradeoff for data volume optimization OR rigid reporting requirements where taking snapshots make sense (ex. Financial reporting)\nDWH datasets will be fact tables representing a single fact type (ex. Sales, Sales Forecast or Inventory), joined with the minimum dimensional attributes to be useful in a stand-alone setting.\nAvoid subsetting similar datasets (ex. Inventory 2019 vs Inventory 2022)\nDWH datasets¬†includes conformed dimensional tables (like a Calendar Dimension with FY attributes or golden record customer master)\n\n\nDashboard Dataset (DASH)\n\n\nRepresent stand-alone datasets that dashboards and cards are built against.\nPublishable only to distribution centers.\nTypically will combine multiple DWH fact tables and conformed dimensions.\nDatasets shaped for analysis (PIVOT or UNPIVOT metrics, or POP (CY vs PY etc. are classified as DASH datasets).\nDo not conduct ETL on DASH datasets"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#engineering-produces-a-dashboard",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#engineering-produces-a-dashboard",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "1. Engineering produces a dashboard",
    "text": "1. Engineering produces a dashboard\nEngineering owns ‚Äúdatabase_monitoring‚Äù (dbm) and publishes a dashboard to the PDC (public distribution center)\n\nDATASOURCE via raw - dbm_RAW\nETL to produce dbm_DWH and dbm_DASH\nDISTRIBUTE via publish to PDC (dbm_DASH)"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#infosec-augments-engineerings-dashboard",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#infosec-augments-engineerings-dashboard",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "2. Infosec augments Engineering‚Äôs dashboard",
    "text": "2. Infosec augments Engineering‚Äôs dashboard\nInfosec wants to augment database_monitoring (dbm) published by Engineering and publish it as a new asset in PDC (public distribution center)\n\nDATASOURCES\nvia subscription from engineering (dbm_DWH)\nBecause we do not do publish DASH between departmental instances\nRAW data from internal sources\nETL produces infosec_DWH and infosec_DASH\nDISTRIBUTE via publish to PDC (infosec_DASH)"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#secops-chooses-the-most-downstream-branch",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#secops-chooses-the-most-downstream-branch",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "3. SecOps chooses the most downstream branch",
    "text": "3. SecOps chooses the most downstream branch\nSecurity Operations wants to augment the work from Infosec and publish it as a new asset in PDC.\n\nThis introduces a 3-step ETL chain (RAW, engineering (dbm_DWH), or infosec (infosec_DWH) that SecOps must choose where to branch from.\n\nPublish / Subscriber requests should be configured from the most downstream certified data owner ‚Äì in this case infosec.\n\nIf an update is made to how engineering handles database_monitoring, this ensures the update is passed to infosec. If infosec updates their ornamentation, that update passes down to SecOps and anyone who has branched off of it."
  },
  {
    "objectID": "blog/posts/2023-01-24_DomoVariables/index.html",
    "href": "blog/posts/2023-01-24_DomoVariables/index.html",
    "title": "Domo Variables",
    "section": "",
    "text": "https://domo-dojo.domo.com/page/1880852133\n\nVariable Types\n\nText,number, date\nControls\n\nVariable Grant\n\nThree new Variable and Beast Mode, Domo STats Datasets\n\nFAQ\nDoes Variables support dynamic formatting ‚Äì no\nUnknown if supports Optimization by Domo Engineering\nVariable is added as a dataset column\nVariables exist at a Global Scope across Domo and a Card Scope\nThe GRANT does not prevent users from altering variables\n\n\nQuestions from Oct CAB\nVariables for WHAT-IF Analysis\n\nPreviously would have to CROSS JOIN a webform to add a column to the dataset\nSave Variable / Dataset\nTO EXPLORE - column switching\nCASE WHEN VARIABLE = ‚Äòvalue‚Äô THEN  END\nVariables for switching EXCHANGE RATE\nCASE WHEN VARIABLE = ‚ÄòUSD‚Äô then  END\nVariables + Publish?\nVariables + Smart Text?\nGrants for separating Global vs.¬†Personal variables?\nImpact when data changes with large datasets?\nWHY IS THERE NO KB?? - because it‚Äôs not in GA :)\nBECAUSE THEY DON‚ÄôT CARE ABOUT DOCUMENTATION - true"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html",
    "title": "Domo Onboarding",
    "section": "",
    "text": "This document describes the best practices for beginner Domo users. There are different personas use cases covered in this document:\nüñäÔ∏è this is a working document (ish). ¬†Leave comments if specific content doesn‚Äôt make sense or you need more information."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#motivation",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#motivation",
    "title": "Domo Onboarding",
    "section": "Motivation",
    "text": "Motivation\nThis document contains a set of recommendations which will help end users:\n\nOptimize the development process\nReduce development efforts\nBe integrated into SIE process\nUnderstand how to improve the content searchability and accessibility\nUnderstand Domo tooling that can lead to improved customer satisfaction and engagement."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#relevant-links",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#relevant-links",
    "title": "Domo Onboarding",
    "section": "Relevant Links",
    "text": "Relevant Links\nNew Features\nCurrent Release Notes\nüßµ Domo Training Slack Channel"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#core-domo-terms",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#core-domo-terms",
    "title": "Domo Onboarding",
    "section": "Core Domo Terms",
    "text": "Core Domo Terms\n\nDataSet: In Domo, a DataSet is a single flat table of data consisting of columns and rows.\nDatasets are stored as flat files in ‚ÄúVault‚Äù (Amazon S3) before getting loaded into ‚ÄúAdrenaline‚Äù (parallel distributed database layer)\nDataFlow: a job in the Domo Data Center that makes transformations (e.g.¬†joins, edits, calculations, etc.) to existing DataSets inside of Domo.\nThe output of a DataFlow is a new dataset (flat file) stored in Vault.\nAnalyzer: we design a Card in the Analyzer. The Analyzer is where we create and edit the card.\nÔªø\nCard: synonymous with ‚Äúchart‚Äù, ‚Äúgraph‚Äù, or ‚Äúplot‚Äù\nUnderstanding Cards KB link\nEach card gets reduced to a SQL Query against the underlying dataset\nÔªø\nDashboard/Page: a group of cards Ôªø\nManaging Cards and Dashboards KB Link"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#unofficial-terms-scotts-terms",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#unofficial-terms-scotts-terms",
    "title": "Domo Onboarding",
    "section": "Unofficial Terms / ‚ÄúScott‚Äôs Terms‚Äù",
    "text": "Unofficial Terms / ‚ÄúScott‚Äôs Terms‚Äù\n\nWall: a term to represent Pages in Domo (e.g.¬†‚ÄúI can see a bunch of different walls in Domo‚Äù)\nPretty Picture: a term to represent Cards in Domo (e.g.¬†I can see a bunch of pretty pictures hanging on a wall in Domo‚Äù)\nShell: A Card is like a Shell - we design the Shell in the Analyzer and the data from the chosen DataSet flows in the Shell and is displayed according to the Shell parameters (i.e.¬†filters, time frame, etc.)"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#business-terms",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#business-terms",
    "title": "Domo Onboarding",
    "section": "‚ÄúBusiness‚Äù Terms",
    "text": "‚ÄúBusiness‚Äù Terms\n\nCharts, graphs: Any sort of graphic to visualize data\nDashboards: A collection of key business indicators organized and arranged on a single page"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#jae-recommendations",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#jae-recommendations",
    "title": "Domo Onboarding",
    "section": "Jae Recommendations",
    "text": "Jae Recommendations\n\nRecommended naming conventions for datasets/dataflows\nUse snake_case as it is easier to read.\nEx. MYPROJ_01_historisation_v1_PROD\n_<STAGE_ 1/2/X>__<Version 1/2/X>_\nNaming conventions allow the DSO team to track your utilization as well as facilitate data categorization.\n\nThe status of this dataset/dataflow. Also if you would like to create a copy and work on parallel development you just need to change the prefix to DEV and work on it.\nProject Code should be unique and will help us to monitor the rows allocation per project per instance\nStage allows you better to define the data lineage and identify dependencies\nDescription provides more information about the nature of transformation or business logic\nVersioning allows you to better manage the versioning (you might have PROD____ V1 and then you create DEV____ V2 to work on in the new version). This approach allows you to better control and separate different versions of dataflow.\n\n\n\nAccount Creation and Dataset Continuity\n\nManaging Accounts / Dataset Credentials when individuals go on PTO or leave the Company\nDomo KB Link\n‚ÄúI‚Äôd like to know what is the current way we use the service account to manage connectors / credentials in Domo so that the management of those connectors can be spread across a few individuals. ¬†Currently, our team members are creating those connectors in their own account causing maintenance issues when those individual is on PTO or left the company.‚Äù\nDatasets will continue executing using the stored credentials in an account object as long as the credentials are valid. ¬†If a user is removed from Domo, the account is not automatically assigned, admins will need the Manage All Accounts¬†role Grant to administer accounts that have not explicitly been shared with them.\nAssign Account ownership to a service account OR a Domo Group (beta)\nTake note that there are different account sharing levels, Read, Edit, Owner etc.\n\n\nCreating Accounts\nAccounts are created when users enter credentials for a datasource (Adobe Analytics, Salesforce, Snowflake etc). These credentials cannot be seen in plain text anywhere in Domo but are exchanged when a connector requests access from the source system.\nAccounts are owned by a user(s) or group.\n\nOwners can rename accounts and update the stored credentials (cycling credentials). ¬†\nUsers who have Read access to an account can impersonate the stored credentials and create new data extracts from the source system.\n\n\n\n\nRecommended naming conventions for dataset columns\nWe recommend using snake case (article) for column names.\n\n\nRecommended tagging structure\nTo facilitate dataset classification, Jae requires the use of tags. ¬†\nTags can be applied to datasets AND dataflows but they do not transfer automatically from a parent object to a child object.\n\nPrefix Breakdown\ncl_\nContent lifecycle\ncl_PROD\ncl_DEV\ncl_UAT\ncl_ARCHIVE\ncl_DELETE\npj_\nProject\npj_MONIT\n\n\nKnown Project Prefixes\npj_MONIT\nFor instance monitoring datasets (Domo_Governance, Domo_Stats etc).\n\n\n\nETL and Data Pipeline Development\nHow to Structure your DataCenter - video\n\nAlways comment you code (for MySQL/Redshift/Adrenaline flows) Each temporary table should be commented on purpose and what is the output\nTry to use clear names for Magic tiles (instead of generated one like Select Columns 1/2/3 or Remove duplicates)\nUse a bus matrix to organize and play your pipeline\nCategorize datasets as Fact or Dimension (and wait till the late steps to JOIN them\nAlways apply GROUP BY or DEDUPLICATION before JOIN‚Äôing in ETL\nTry to UNION facts. ¬†Do Not JOIN facts together.\nUse the ALTER COLUMNS tile to standardize data types\nUNION columns with an Activity_Type and Activity_Date for standard Filtering\nUsing WebForms you can join in descriptive information to augment datasets\nDon‚Äôt filter your output datasets in ETL. Filter in Cards or a DSV used as a Semantic Layer.\nRationalize when it‚Äôs appropriate to write business logic into Magic (Formula tiles), webform_lookups, vs.¬†Beast Modes.\nDo not leverage DSVs for data transformation if you‚Äôre also using Magic. Try to keep all your transformation logic in the same place.\nIf you are writing the same code multiple times, find a different implementation strategy\nduring this stage of adoption (and given the small data) JUST do Magic & Beast Modes. Don‚Äôt use DSVs until Users demand an intermediate semantic layer.\n\n\n\nUse Change Log and Versioning\nDomo allows you to keep track of changes in the dataflow (all types).\n\n\nArchiving and Deleting Content\nüöÄ Deleting a dataflow does not automatically delete connected datasets.\nTo properly decommission dataflows:\n\nRelabel the output datasets, DELETE_<dataset_name>\nRelabel the dataflow, DELETE_<dataflow_name>\nDelete dataflows and datasets\n\nThere is no archive feature built into Domo. ¬†As a surrogate for archiving, users can\n\nDisable execution of dataflows, workbench jobs, or connector datasources\nUse Lineage to confirm datasets are not part of an operational pipeline\nRelabel and retag assets.\nCards and Pages can be moved from production pages and relabeled as appropriate."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#supporting-features-from-domo",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#supporting-features-from-domo",
    "title": "Domo Onboarding",
    "section": "Supporting Features from Domo",
    "text": "Supporting Features from Domo\n\nAdrenaline Dataflows\nMagic 2.0\nCLI\nDataset Views\nPublish\nCertification\nAdvanced tools (Stacker, Data Assembler)"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#which-tool-is-the-best-for-which-use-case",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#which-tool-is-the-best-for-which-use-case",
    "title": "Domo Onboarding",
    "section": "Which tool is the best for which use case",
    "text": "Which tool is the best for which use case"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#upsert-and-partitioning-tools",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#upsert-and-partitioning-tools",
    "title": "Domo Onboarding",
    "section": "Upsert and Partitioning tools",
    "text": "Upsert and Partitioning tools"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#understanding-pages-and-dashboards",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#understanding-pages-and-dashboards",
    "title": "Domo Onboarding",
    "section": "Understanding Pages and Dashboards",
    "text": "Understanding Pages and Dashboards\nIn addition to default system dashboards (Overview, Favorites, Shared), as well as company-defined default dashboards, users can display content and cards on dashboards.\nPage owners and users with manage pages rights can lock a page to prevent alterations to a page. ¬†Consider the use of Certification workflows for ‚Äòofficial‚Äô content that should not be altered."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#change-card-interactions-to-control-what-happens-when-users-click-on-a-dashboard",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#change-card-interactions-to-control-what-happens-when-users-click-on-a-dashboard",
    "title": "Domo Onboarding",
    "section": "Change Card Interactions to control what happens when Users click on a Dashboard",
    "text": "Change Card Interactions to control what happens when Users click on a Dashboard\nDefault behavior is to apply filters on click, but dashboard designers change interaction behavior on a card by card basis.\nEx. Can have drilldown in place, or click to open a link to another Domo Page or external link.\nInteractions KB Link\nURL Links to pages can include predefined column filters using PFilters. ¬†KB Link\n\nAdditional Resources\n\nDesign better Dashboards / Tell Better Data Stories (üìπ YouTube Video)\nUnderstanding Pages (System Defaults - Overview, Favorites, Shared ‚Äì KB Link)"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#understanding-cards",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#understanding-cards",
    "title": "Domo Onboarding",
    "section": "Understanding Cards",
    "text": "Understanding Cards\nCards are the Domo equivalent of charts, plots, or graphs.\nFiltering, Sorting, cards in the Details view\n\nSharing Cards to Pages vs Save As (creating a copy)\nSharing and Removing Access to Cards and Pages Link to KB\n\n\nLock your Cards and Pages to prevent users from editing the content.\n\n\nChart Colors\nColor Rules (‚Äúconditional formatting‚Äù) Link to KB\nChanging Default Colors in different Chart Types Link to KB\nüöÄ Only one Default Theme (color palette) can exist per instance in the form of the Brand Kit feature. ¬† Link to KB\n‚ùì ‚ÄúIn Tableau when you select a field to color, it automatically assigns each distinct value a color. This is useful for say Department separation. We can then manually change it if needed. ¬†How do you do it in Domo?‚Äù\n\nEither set color rules (for metrics) OR if you have a chart type that allows you to add a Series (ex. Grouped bar chart) it will assign a color to each unique value\n\n\n\nAggregation across Categories / Window Functions / Cumulative Sum\nThere are 3 ways to compare aggregates outside of the window of data you‚Äôre currently in\nSegments\nKB Link\nWindow Functions & Fixed Functions\nUltimate 2020 Window Function Tutorial üìπ YouTube Video\n3 Month Average Lag üìπ YouTube Video\nCertain Card Types allow cross category aggregation\nPeriod over Period\nRunning Total\n\n\nBeast Modes are formulas defined in Analyzer / Cards\nBeast Mode calculations will frequently use MySQL (and sometimes Redshift) syntax.\nüöÄ Beast Modes can be applied before aggregation (at the row level) or after aggregation\nIn most cases, any CASE statement should occur INSIDE a beast mode.\nCASE statements and date-specific transforms that exist independently of aggregate functions should often move upstream and persist in the dataset itself.\n\n\nUnderstanding Card Sharing and Data Security\nCard and Page sharing versus data security are two very different functions with different implications. ¬†\n‚ö†Ô∏è If you share a card or dashboard, you are implicitly giving READ access to the underlying dataset(s) represented in the entity.\n‚ö†Ô∏è If there is content that needs to be filtered on a per-user basis consider using PDP (Personalized Data Permissions) to apply row-level security to limit the rows of data in a dataset a user has access to."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#jae-recommendations-1",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#jae-recommendations-1",
    "title": "Domo Onboarding",
    "section": "Jae Recommendations",
    "text": "Jae Recommendations\n\nCard Design\nüöÄ Naming Convention Tip: ¬†Update the card title to indicate cards with a drill path.\n\nConsider an asterisk, *, ¬†or ALT ¬†+ 16, ‚ñ∫, to indicate cards with a drill path.\n\nüöÄ There is a toggle to prevent users from drilling down to raw data\n\n\nBeast Mode Management\n\nUse Beast Mode Manager and DomoGovernance_BeastModes dataset to monitor beast mode proliferation in your instance\nCard performance is directly correlated SQL commands issued in beast modes where possible to avoid COUNT(DISTINCT) and text-based operations (REGEX or LIKE).\nWhen reasonable, materialize row-based transforms (date conversions) onto the dataset.\nSharing beast modes to datasets will improve card performance but will slow dataset indexing.\nThere is a difference between sharing a card versus making a copy of a card. ¬†Cards can be shared (linked) to multiple pages making it easy to have one object to maintain.\n\n\n\nCard and Dashboard Management\n\nEach card has its own URN. ¬†You can either create a copy / duplicate of a card and embed it on a page (it will have its own URN) OR simply move or share a card to a page (it retains the original URN)."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-faq",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-faq",
    "title": "Domo Onboarding",
    "section": "Card FAQ",
    "text": "Card FAQ\nIs there a difference between ‚ÄúSave As‚Äù / ‚ÄúDuplicating‚Äù vs ‚ÄúSharing‚Äù a card?\n\nSave As or Duplicate will create a new object in Domo that is separate from the original entity. ¬†\nChanges made to the duplicated card or the original card will not impact the other. ¬†\nDuplicating Cards KB\n\nCan I prevent users from altering my card or page?\n\nYes, lock your content. ¬†KB Link\nConsider a certification flow for ‚Äòofficial content‚Äô. ¬†KB Link\n\nHow can I alias data (fix values) or create a custom calculated metric in a card?\n\nCreate a Beast Mode Link KB¬†using MySQL syntax functions\nEx. CASE WHEN END or SUM(CASE WHEN ‚Ä¶ ¬†END)"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-features-for-participants-non-editors",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-features-for-participants-non-editors",
    "title": "Domo Onboarding",
    "section": "Card Features for Participants (non-editors)",
    "text": "Card Features for Participants (non-editors)\n\nUse Annotations to share insights\nCreate card annotations and find or document interesting insights using annotations\n\nAnnotation KB\n\n\n\nUse Alerts to update users with changes in Domo\n\nAlerts KB\n\nAlerts can be configured for cards and metrics represented in cards as well as datasets."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-features-for-editors",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-features-for-editors",
    "title": "Domo Onboarding",
    "section": "Card Features for Editors",
    "text": "Card Features for Editors\n\nUse Quick Filters to encourage data exploration\n\nQuick Filters KB¬†\n\n\n\nUse Page-level Filter Views to create preset combinations of filters for a guided user experience\n\nFilter Views KB\n\n\n\nAdd Drill Paths to Cards to control the exploration experience\n\nDrill Paths KB"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#documentation",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#documentation",
    "title": "Domo Onboarding",
    "section": "Documentation",
    "text": "Documentation\n\nHigh Level Design / Solution overview\nNew Users‚Äô guide\nData Dictionary (see section below)"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#data-quality",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#data-quality",
    "title": "Domo Onboarding",
    "section": "Data Quality",
    "text": "Data Quality"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#domo-momentum---certification",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#domo-momentum---certification",
    "title": "Domo Onboarding",
    "section": "Domo Momentum - Certification",
    "text": "Domo Momentum - Certification"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#dev-prod-maintenance",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#dev-prod-maintenance",
    "title": "Domo Onboarding",
    "section": "Dev / Prod & Maintenance",
    "text": "Dev / Prod & Maintenance\n\nUse Domo Sandbox for managing same instance and cross-instance dev/prod content\n\nBy default SIE Domo instances will not have a second Domo instance to separate Dev from Prod. ¬†Within the same instance however, Domo Sandbox can help manage the promotion of development assets to production and back. Sandbox KB¬†\nDo not make full copies of production datasets into Dev; instead, consider developing against randomized samples of data. ¬†This will both help manage developer experience (faster execution times) and instance rowcount.\n\n\n\nTransfer Assets to Appropriate Stakeholders"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#single-sign-on-sso-and-okta-authentication",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#single-sign-on-sso-and-okta-authentication",
    "title": "Domo Onboarding",
    "section": "Single Sign On (SSO) and OKTA Authentication",
    "text": "Single Sign On (SSO) and OKTA Authentication\nUser and Group Management KB¬†link\nUsers can be aJaed to Domo at will. ¬†The SIE Domo contract does not charge licensing fees on a per user basis.\nSee Adding Users to Domo KB¬†link\nOut of the box, Domo user authentication is handled with email and login. ¬†User provisioning and authentication can be handled via SSO (SSO using SAML KB¬†link)\n\nLogging into Domo via Direct Sign On in an environment with SSO\nTo bypass SSO Authentication, users must first be added to the Direct Sign On (DSO) List. ¬†\nOnce aJaed to DSO, users can bypass SSO by adding /auth/index?domoManualLogin=true to the url."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#users-groups-roles",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#users-groups-roles",
    "title": "Domo Onboarding",
    "section": "Users, Groups, Roles",
    "text": "Users, Groups, Roles\n\n‚öñÔ∏è SIE Standard Roles\nRoles are comprised of Grants which determine actions users can take in Domo.\nJae will create standard roles and groups to which instance members will be assigned by default. ¬†Instance admins can create their own custom roles for departmental users as necessary.\n\nSIE_Admin\nSIE_Reset\nSIE_Priviliged\nPrivileged + ADR Flows\nSIE_Test\n\nTo monitor role & Grant configuration:\n\nGo To Admin > Governance > Roles > Grid\n\n\n\nDefine Custom Roles\n\nhttps://knowledge.domo.com/Administer/Controlling_Access_in_Domo/Managing_Custom_Roles\nhttps://knowledge.domo.com/Administer/Controlling_Access_in_Domo/04Security_Role_Reference\n\n\n\n‚öñÔ∏è SIE Default Groups\n\nSIE Admin\nSIE User\n\n\n\nDefining Groups\nWhere Roles and Grants define what users can do, Group membership should be used to either:\n\nManage content ownership\nShare content\n\nAvoid the temptation to manage content by individuals, instead try to adopt the practice of sharing content with groups.\n\nhttps://domohelp.domo.com/hc/en-us/articles/360042934294-Creating-and-Managing-User-Groups\n\n\n\nImplement Row-Level Security with Personalized Data Permissions (PDP) ¬†Policies\nüöÄ Monitoring card sharing is NOT a replacement for applying PDP policies. ¬†Jae strongly recommends applying PDP policies to all sensitive data in Domo.\nüöÄ A card gets reduced to a SQL query against a dataset which is executed at runtime (i.e.¬†when Michelle tries to view the card). ¬†AND PDP creates row-level security to the dataset which limits what gets returned by the query.\nex. Michelle can create a card against any dataset that has been shared with her, but she will only see the rows the pdp policy allows her to see.\nex. SELECT Product, sum(amount) GROUP BY Product.\nüöÄ PDP policies are additive (each policy you‚Äôre a part of adds an OR clause for the data you can see).\n\nPDP Links\n\nPersonalized Data Permissions - KB Link\nhttps://domohelp.domo.com/hc/en-us/articles/4415800746391-Governance-Toolkit-PDP-Automation\nhttps://domohelp.domo.com/hc/en-us/articles/360043439353-PDP-Policy-Autocreation"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#datacenter-audits",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#datacenter-audits",
    "title": "Domo Onboarding",
    "section": "Datacenter Audits",
    "text": "Datacenter Audits\n\nCreate a schedule with your technology & business users to clean up on a regular basis and monitor the results through governance and activity logs\nSet cleaning campaigns to a theme to make it fun\nCheck to make sure your instance objects are in security compliance with other parts of the business\nSet alerts on ETL jobs to monitor failure ‚Äì can set up as SMS message\nCheck schedules for ETL jobs and make sure they are available when needed for the business dashboard users\n\n\nSecurity\n‚ö†Ô∏è By default, most users will not see all the data available in the datacenter; however, sharing a card automatically shares the underlying dataset. ¬†Therefore PDP (personalized data permissions KB) is the only way to implement proper data security."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#manage-data-using-metadata",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#manage-data-using-metadata",
    "title": "Domo Onboarding",
    "section": "Manage Data using Metadata",
    "text": "Manage Data using Metadata\n\nUse Tags facilitate dataset audits and provide additional dataset metadata (KB)\nUtilize the Governance Connectors (KB)¬†to access data schemas, beastmodes, access rights to dataset, and tags\nCreate a data dictionary dashboard"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#monitor-domo-instance-and-projects",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#monitor-domo-instance-and-projects",
    "title": "Domo Onboarding",
    "section": "Monitor Domo Instance and Projects",
    "text": "Monitor Domo Instance and Projects"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#domo-architecture-review",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#domo-architecture-review",
    "title": "Domo Onboarding",
    "section": "Domo Architecture Review",
    "text": "Domo Architecture Review"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#data-science-toolkit",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#data-science-toolkit",
    "title": "Domo Onboarding",
    "section": "Data Science Toolkit",
    "text": "Data Science Toolkit\n\nJupyter Notebook\nKB¬†link\nPrimary Advantages\n\nNotebooks can be scheduled to run as a dataflow\nDatasets can be read in or updated using the domo jupyter package\nDuring development, the performance of the notebooks will feel much faster than Magic 2.0 Scripting Tiles\n\nDisadvantages\n\nNo built-in version control (no access to private GitHub)\nNo easy way to ‚Äúdownload all files‚Äù"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#extending-domo-with-apis",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#extending-domo-with-apis",
    "title": "Domo Onboarding",
    "section": "Extending Domo with APIs",
    "text": "Extending Domo with APIs\nüìö Jae Private API documentation"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "nbdev Blog",
    "section": "",
    "text": "Domo Distribution and Governance Strategy across Instances\n\n\n\n\n\n\n\nDomo Everywhere\n\n\n\n\n\n\n\n\n\n\n\nJan 24, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n  \n\n\n\n\nDomo Variables\n\n\n\n\n\n\n\nVariables\n\n\n\n\n\n\n\n\n\n\n\nJan 24, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDomo Onboarding\n\n\n\n\n\n\n\nnew user\n\n\n\n\n\n\n\n\n\n\n\nJan 24, 2023\n\n\nJae Wilson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "domolibrary: a powerful pydomo alternative",
    "section": "",
    "text": "domolibrary is a Python package that provides a OOP (class-based) and a functional approach to interacting with Domo‚Äôs API framework.\nAll accessed APIs are documented under DataCrew‚Äôs Domo Documentation page.\nThis library was created by DataCrew contributor Jae Wilson."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "domolibrary: a powerful pydomo alternative",
    "section": "Install",
    "text": "Install\nThe DataCrew team is hard at work expanding the list of available classes and routes. We have a ton of work completed, it‚Äôs just a matter of migrating and documenting the code into this library.\npip install domo_library"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "domolibrary: a powerful pydomo alternative",
    "section": "How to use",
    "text": "How to use\n\nAuthentication\nFor each task, consider the appropriate DomoAuth mechanism. In most cases DomoFullAuth or DomoTokenAuth will be appropriate as this library predominately accesses private APIs.\nAny Public routes or methods will be labeled appropriately in which case you should use DomoDeveloperAuth. Public routes are APIs enumerated and documented under Developer.Domo.com.\nTypically each project will begin with configuring an auth object. If you are accessing multiple Domo instances, you‚Äôll probably need multiple auth objects.\n\n# configure an auth method\nimport os\nimport domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth( domo_instance = 'domo-dojoo', domo_access_token = os.environ['DOMO_DOJO_ACCESS_TOKEN'])\n\n\n\nOption 1: class based programming\nIn this project domo entities, DomoActivityLog, DomoDataset are all prefixed ‚ÄòDomo‚Äô and can be found in the classes folder. Each class method will call one or more routes. Each route will interact with one and only one API.\nAlthough most methods will be standard methods that will be called after creating an instance of the class, some methods will be classmethods which return an instance of the class.\nIn the example below, DomoDataset.get_from_id is a classmethod.\nNote: DomoLibrary uses the asynchronous aiohttp requests library to offer users the ability to write concurrently executing code.\n\nimport domolibrary.classes.DomoDataset as dmds\n\n# this is a class method\ndomo_ds = await dmds.DomoDataset.get_from_id(auth = token_auth, dataset_id = os.environ['DOJO_DATASET_ID'])\ndomo_ds\n\n_from_httpx_response <Response [200 OK]>\nResponseGetData(status=200, response={'id': '04c1574e-c8be-4721-9846-c6ffa491144b', 'displayType': 'domo-jupyterdata', 'dataProviderType': 'domo-jupyterdata', 'type': 'Jupyter', 'name': 'domo_kbs', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1668379680000, 'lastTouched': 1668385822000, 'lastUpdated': 1668385822045, 'rowCount': 1185, 'columnCount': 7, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 825, 'transportType': 'API', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'tags': '[\"developer_documentation\",\"hackercore\"]', 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\n\n\nDomoDataset(id='04c1574e-c8be-4721-9846-c6ffa491144b', display_type='domo-jupyterdata', data_provider_type='domo-jupyterdata', name='domo_kbs', description=None, row_count=1185, column_count=7, stream_id=825, owner=DictDot(id='1893952720', name='Jae Wilson', type='USER', group=False), formula=DictDot(), schema=DomoDataset_Schema(dataset=..., columns=[]))\n\n\nOnce instantiated, you can call methods to interact with that object. You typically won‚Äôt have to pass auth creds again because they are saved to the object.\nIn the example below we are retrieving the DomoDataset_Schema which consists of subclass DomoDataset_Schema_Column using the DomoDataset_Schema.get method.\nWe take the approach of where possible converting dictionaries from Domo APIs into classes because it provides greater predictability when users are creating integrations between platforms (ex. Domo to Trello).\n\nawait domo_ds.schema.get()\n\n_from_httpx_response <Response [200 OK]>\n\n\n[DomoDataset_Schema_Column(name='objectID', id='objectID', type='STRING'),\n DomoDataset_Schema_Column(name='url', id='url', type='STRING'),\n DomoDataset_Schema_Column(name='Title', id='Title', type='STRING'),\n DomoDataset_Schema_Column(name='article', id='article', type='STRING'),\n DomoDataset_Schema_Column(name='views', id='views', type='LONG'),\n DomoDataset_Schema_Column(name='created_dt', id='created_dt', type='DATETIME'),\n DomoDataset_Schema_Column(name='published_dt', id='published_dt', type='DATETIME')]\n\n\nTypically all information about an entity is saved in the object\n\ndomo_ds.__dict__\n\n{'auth': DomoTokenAuth(domo_instance='domo-dojoo', token_name='token_auth', url_manual_login='https://domo-dojoo.domo.com/auth/index?domoManualLogin=true'),\n 'id': '04c1574e-c8be-4721-9846-c6ffa491144b',\n 'display_type': 'domo-jupyterdata',\n 'data_provider_type': 'domo-jupyterdata',\n 'name': 'domo_kbs',\n 'description': None,\n 'row_count': 1185,\n 'column_count': 7,\n 'stream_id': 825,\n 'owner': namespace(id='1893952720',\n           name='Jae Wilson',\n           type='USER',\n           group=False),\n 'formula': namespace(),\n 'schema': DomoDataset_Schema(dataset=DomoDataset(id='04c1574e-c8be-4721-9846-c6ffa491144b', display_type='domo-jupyterdata', data_provider_type='domo-jupyterdata', name='domo_kbs', description=None, row_count=1185, column_count=7, stream_id=825, owner=DictDot(id='1893952720', name='Jae Wilson', type='USER', group=False), formula=DictDot(), schema=...), columns=[DomoDataset_Schema_Column(name='objectID', id='objectID', type='STRING'), DomoDataset_Schema_Column(name='url', id='url', type='STRING'), DomoDataset_Schema_Column(name='Title', id='Title', type='STRING'), DomoDataset_Schema_Column(name='article', id='article', type='STRING'), DomoDataset_Schema_Column(name='views', id='views', type='LONG'), DomoDataset_Schema_Column(name='created_dt', id='created_dt', type='DATETIME'), DomoDataset_Schema_Column(name='published_dt', id='published_dt', type='DATETIME')])}\n\n\n\n\nOption 2 functional programming\nAlthough classes add a pretty wrapper for interacting with Domo APIs, users can opt to interact directly with APIs by way of routes.\nAll route functions will exclusively call one API and will always return a ResponseGetData object OR raise an Exception if appropriate.\nFor example we can implement similar functionality as the Option 1 example by calling the get_dataset_by_id function.\n\nimport domolibrary.routes.dataset as dataset_routes\n\nds_res = await dataset_routes.get_dataset_by_id( auth = token_auth, dataset_id = os.environ['DOJO_DATASET_ID'])\nds_res\n\n_from_httpx_response <Response [200 OK]>\nResponseGetData(status=200, response={'id': '04c1574e-c8be-4721-9846-c6ffa491144b', 'displayType': 'domo-jupyterdata', 'dataProviderType': 'domo-jupyterdata', 'type': 'Jupyter', 'name': 'domo_kbs', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1668379680000, 'lastTouched': 1668385822000, 'lastUpdated': 1668385822045, 'rowCount': 1185, 'columnCount': 7, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 825, 'transportType': 'API', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'tags': '[\"developer_documentation\",\"hackercore\"]', 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\n\n\nResponseGetData(status=200, response={'id': '04c1574e-c8be-4721-9846-c6ffa491144b', 'displayType': 'domo-jupyterdata', 'dataProviderType': 'domo-jupyterdata', 'type': 'Jupyter', 'name': 'domo_kbs', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1668379680000, 'lastTouched': 1668385822000, 'lastUpdated': 1668385822045, 'rowCount': 1185, 'columnCount': 7, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 825, 'transportType': 'API', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'tags': '[\"developer_documentation\",\"hackercore\"]', 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\n\n\nResponseGetData will always include a boolean is_success, the API status, and raw API response.\nTypically the route methods will not alter the response unless the API does not include a descriptive response (ex, routes.dataset.set_dataset_tags does not return a response so we artificially alter the response in the function.)\n\n[(prop, type(getattr(ds_res , prop))) for prop in dir(ds_res) if not prop.startswith('_')]\n\n[('auth', domolibrary.client.DomoAuth.DomoTokenAuth),\n ('is_success', bool),\n ('response', dict),\n ('set_response', method),\n ('status', int)]\n\n\n\nds_res.response\n\n{'id': '04c1574e-c8be-4721-9846-c6ffa491144b',\n 'displayType': 'domo-jupyterdata',\n 'dataProviderType': 'domo-jupyterdata',\n 'type': 'Jupyter',\n 'name': 'domo_kbs',\n 'owner': {'id': '1893952720',\n  'name': 'Jae Wilson',\n  'type': 'USER',\n  'group': False},\n 'status': 'SUCCESS',\n 'created': 1668379680000,\n 'lastTouched': 1668385822000,\n 'lastUpdated': 1668385822045,\n 'rowCount': 1185,\n 'columnCount': 7,\n 'cardInfo': {'cardCount': 0, 'cardViewCount': 0},\n 'properties': {'formulas': {'formulas': {}}},\n 'state': 'SUCCESS',\n 'validConfiguration': True,\n 'validAccount': True,\n 'streamId': 825,\n 'transportType': 'API',\n 'adc': False,\n 'adcExternal': False,\n 'cloudId': 'domo',\n 'cloudName': 'Domo',\n 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN',\n 'hidden': False,\n 'tags': '[\"developer_documentation\",\"hackercore\"]',\n 'scheduleActive': True,\n 'cryoStatus': 'ADRENALINE'}\n\n\n\n\nAccess Paginated APIs using the Looper\nA hidden advantage of using the DomoLibrary is that paginated API requests are baked into the route‚Äôs definition.\nConsider query_dataset_private from the routes.dataset.\nInside this function we are using looper from client.get_data to paginate over the API response."
  },
  {
    "objectID": "routes/dataset.html",
    "href": "routes/dataset.html",
    "title": "Dataset Routes",
    "section": "",
    "text": "DatasetNotFoundError (dataset_id, domo_instance)\n\nCommon base class for all non-exit exceptions.\n\n\n\n\n\n query_dataset_private (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        dataset_id:str, sql:str, session:Optional[aiohttp.\n                        client.ClientSession]=None,\n                        loop_until_end:bool=False, limit=100, skip=0,\n                        maximum=100, debug_api:bool=False,\n                        debug_loop:bool=False)\n\nexecute SQL queries against private APIs, requires DomoFullAuth or DomoTokenAuth\n\n\n\n\n\n query_dataset_public\n                       (dev_auth:domolibrary.client.DomoAuth.DomoDeveloper\n                       Auth, dataset_id:str, sql:str,\n                       session:aiohttp.client.ClientSession,\n                       debug_api:bool=False)\n\nquery for hitting public apis, requires client_id and secret authentication\n\n\n\n\n\n QueryRequestError (dataset_id, domo_instance, sql)\n\nCommon base class for all non-exit exceptions.\n\nimport os\nimport pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nsql = f\"SELECT * FROM TABLE\"\n\nds_res = await query_dataset_private(dataset_id=os.environ['DOJO_DATASET_ID'],\n                                     auth=token_auth,\n                                     sql=sql,\n                                     skip=42,\n                                     maximum=5,\n                                     loop_until_end=False)\npd.DataFrame(ds_res.response)\n\n\n\n\n\n  \n    \n      \n      objectID\n      url\n      Title\n      article\n      views\n      created_dt\n      published_dt\n    \n  \n  \n    \n      0\n      000004790\n      https://domo-support.domo.com/s/article/360046...\n      Starting, Stopping, and Restarting the Workben...\n      Important:  Support for Workbench 4 ended on ...\n      39\n      2022-10-24T22:30:00\n      2022-10-24T22:41:00\n    \n    \n      1\n      000004796\n      https://domo-support.domo.com/s/article/360047...\n      Understanding the Workbench 4 User Interface\n      Important:  Support for Workbench 4 ended on ...\n      56\n      2022-10-24T22:30:00\n      2022-10-24T22:40:00\n    \n    \n      2\n      000004773\n      https://domo-support.domo.com/s/article/360046...\n      Using the External Process File Provider in Wo...\n      Important:  Support for Workbench 4 ended on ...\n      20\n      2022-10-24T22:30:00\n      2022-10-24T22:41:00\n    \n    \n      3\n      000004798\n      https://domo-support.domo.com/s/article/360046...\n      Workbench 4 FAQs\n      Important:  Support for Workbench 4 ended on ...\n      48\n      2022-10-24T22:30:00\n      2022-10-24T22:40:00\n    \n    \n      4\n      000004800\n      https://domo-support.domo.com/s/article/360047...\n      Workbench 4 Overview\n      Important:  Support for Workbench 4 ended on ...\n      40\n      2022-10-24T22:30:00\n      2022-10-24T22:41:00"
  },
  {
    "objectID": "routes/dataset.html#dataset-properties",
    "href": "routes/dataset.html#dataset-properties",
    "title": "Dataset Routes",
    "section": "Dataset Properties",
    "text": "Dataset Properties\n\n\nget_dataset_by_id\n\n get_dataset_by_id (dataset_id:str,\n                    auth:Optional[domolibrary.client.DomoAuth.DomoAuth]=No\n                    ne, debug_api:bool=False,\n                    session:Optional[aiohttp.client.ClientSession]=None)\n\nretrieve dataset metadata\n\nimport os\nimport pandas as pd\n\ntry:\n    token_auth = dmda.DomoTokenAuth(\n        domo_instance=\"domo-dojo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n    )\n\n    await get_dataset_by_id(dataset_id=123, auth=token_auth)\n\nexcept DatasetNotFoundError as e:\n    print(e)\n\nResponseGetData(status=404, response='Not Found', is_success=False)\ndataset - 123 not found in domo-dojo\n\n\n\nimport os\nimport pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nds_res = await get_dataset_by_id(dataset_id=os.environ['DOJO_DATASET_ID'], auth=token_auth)\npd.DataFrame([ds_res.response])\n\nResponseGetData(status=200, response={'id': '04c1574e-c8be-4721-9846-c6ffa491144b', 'displayType': 'domo-jupyterdata', 'dataProviderType': 'domo-jupyterdata', 'type': 'Jupyter', 'name': 'domo_kbs', 'owner': {'id': '1893952720', 'name': 'Jae Wilson', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1668379680000, 'lastTouched': 1668385822000, 'lastUpdated': 1668385822045, 'rowCount': 1185, 'columnCount': 7, 'cardInfo': {'cardCount': 0, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 825, 'transportType': 'API', 'adc': False, 'adcExternal': False, 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'tags': '[\"Jan-24-2023 21:09\",\"developer_documentation\",\"hackercore\"]', 'scheduleActive': True, 'cryoStatus': 'ADRENALINE'}, is_success=True)\n\n\n\n\n\n\n  \n    \n      \n      id\n      displayType\n      dataProviderType\n      type\n      name\n      owner\n      status\n      created\n      lastTouched\n      lastUpdated\n      rowCount\n      columnCount\n      cardInfo\n      properties\n      state\n      validConfiguration\n      validAccount\n      streamId\n      transportType\n      adc\n      adcExternal\n      cloudId\n      cloudName\n      permissions\n      hidden\n      tags\n      scheduleActive\n      cryoStatus\n    \n  \n  \n    \n      0\n      04c1574e-c8be-4721-9846-c6ffa491144b\n      domo-jupyterdata\n      domo-jupyterdata\n      Jupyter\n      domo_kbs\n      {'id': '1893952720', 'name': 'Jae Wilson', 'ty...\n      SUCCESS\n      1668379680000\n      1668385822000\n      1668385822045\n      1185\n      7\n      {'cardCount': 0, 'cardViewCount': 0}\n      {'formulas': {'formulas': {}}}\n      SUCCESS\n      True\n      True\n      825\n      API\n      False\n      False\n      domo\n      Domo\n      READ_WRITE_DELETE_SHARE_ADMIN\n      False\n      [\"Jan-24-2023 21:09\",\"developer_documentation\"...\n      True\n      ADRENALINE\n    \n  \n\n\n\n\n\n\n\nget_schema\n\n get_schema (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_id:str,\n             debug_api:bool=False)\n\nretrieve the schema for a dataset\n\nsample implementation of get_schema\n\nimport os\nimport pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nds_res = await get_schema(dataset_id=os.environ['DOJO_DATASET_ID'], auth=token_auth)\npd.DataFrame(ds_res.response)\n\n\n\n\n\n  \n    \n      \n      name\n      tables\n      dataSourceId\n      url\n      queryEndpoint\n      progressEndpoint\n      indexEndpoint\n      deleteEndpoint\n      versionId\n    \n  \n  \n    \n      0\n      domo_kbs\n      {'columns': [{'name': 'objectID', 'id': 'objec...\n      04c1574e-c8be-4721-9846-c6ffa491144b\n      /schemas/853832B128D75BCE\n      /query/mmmm-0012-0200/04c1574e-c8be-4721-9846-...\n      /index/mmmm-0012-0200/04c1574e-c8be-4721-9846-...\n      /index/mmmm-0012-0200/04c1574e-c8be-4721-9846-...\n      /delete/mmmm-0012-0200/04c1574e-c8be-4721-9846...\n      3\n    \n  \n\n\n\n\n\n# retrieve schema from response\npd.DataFrame(ds_res.response.get(\"tables\")[0].get(\"columns\"))\n\n\n\n\n\n  \n    \n      \n      name\n      id\n      type\n      visible\n      order\n    \n  \n  \n    \n      0\n      objectID\n      objectID\n      STRING\n      True\n      0\n    \n    \n      1\n      url\n      url\n      STRING\n      True\n      0\n    \n    \n      2\n      Title\n      Title\n      STRING\n      True\n      0\n    \n    \n      3\n      article\n      article\n      STRING\n      True\n      0\n    \n    \n      4\n      views\n      views\n      LONG\n      True\n      0\n    \n    \n      5\n      created_dt\n      created_dt\n      DATETIME\n      True\n      0\n    \n    \n      6\n      published_dt\n      published_dt\n      DATETIME\n      True\n      0\n    \n  \n\n\n\n\n\n\n\n\nset_dataset_tags\n\n set_dataset_tags (auth:domolibrary.client.DomoAuth.DomoFullAuth,\n                   tag_ls:[<class'str'>], dataset_id:str,\n                   debug_api:bool=False,\n                   session:Optional[aiohttp.client.ClientSession]=None,\n                   return_raw:bool=False)\n\nREPLACE tags on this dataset with a new list\n\nimport os\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-dojo\",\n)\n\ntag_ls = ['hackercore', 'developer_documentation']\n\nawait set_dataset_tags(auth=token_auth,\n                       tag_ls=tag_ls,\n                       dataset_id=os.environ['DOJO_DATASET_ID'],\n                       debug_api = False,\n                       return_raw = False\n                       )\n\nResponseGetData(status=200, response='Dataset 04c1574e-c8be-4721-9846-c6ffa491144b tags updated to [hackercore, developer_documentation]', is_success=True)"
  },
  {
    "objectID": "routes/dataset.html#upload-data",
    "href": "routes/dataset.html#upload-data",
    "title": "Dataset Routes",
    "section": "Upload Data",
    "text": "Upload Data\n\noverview\nIn the URL, parts refers to the multi-part API and is unrelated to the partitions concept. The multi-part API was designed to allow sending multiple streams of Data into a data_version simultaneously.\nIn stage 1, the values passed in the Body will be superseded by values in the COMMIT (stage 3), so best practices is to not populate values here.\nThe response includes an uploadId, which must be stored and passed to the URL of the subsequent upload request (stages 2 and 3).\n\n\nurl params\nThe dataTag parameter allows users to UPDATE or REPLACE a datatag (partition)\nNOTE: restateDataTag is largely deprecated // exists for backward compatibility\n\n\nbody params\nThe appendId parameter accepts ‚Äúlatest‚Äù or ‚ÄúNone‚Äù\nlatest will APPEND the data version to the dataset\n\n\n\nUploadDataError\n\n UploadDataError (stage_num:int, dataset_id:str, domo_instance:str)\n\nraise if unable to upload data to Domo\n\n\n\nupload_dataset_stage_1\n\n upload_dataset_stage_1 (auth:domolibrary.client.DomoAuth.DomoAuth,\n                         dataset_id:str, partition_tag:str=None, session:O\n                         ptional[aiohttp.client.ClientSession]=None,\n                         debug_api:bool=False)\n\npreps dataset for upload by creating an upload_id (upload session key) pass to stage 2 as a parameter\n\n\n\nupload_dataset_stage_2_file\n\n upload_dataset_stage_2_file (auth:domolibrary.client.DomoAuth.DomoAuth,\n                              dataset_id:str, upload_id:str,\n                              data_file:Optional[_io.TextIOWrapper]=None, \n                              session:Optional[aiohttp.client.ClientSessio\n                              n]=None, part_id:str=2,\n                              debug_api:bool=False)\n\n\n\n\nupload_dataset_stage_2_df\n\n upload_dataset_stage_2_df (auth:domolibrary.client.DomoAuth.DomoAuth,\n                            dataset_id:str, upload_id:str,\n                            upload_df:pandas.core.frame.DataFrame, session\n                            :Optional[aiohttp.client.ClientSession]=None,\n                            part_id:str=2, debug_api:bool=False)\n\n\n\n\nupload_dataset_stage_3\n\n upload_dataset_stage_3 (auth:domolibrary.client.DomoAuth.DomoAuth,\n                         dataset_id:str, upload_id:str, session:Optional[a\n                         iohttp.client.ClientSession]=None,\n                         update_method:str='REPLACE',\n                         partition_tag:str=None, is_index:bool=False,\n                         debug_api:bool=False)\n\ncommit will close the upload session, upload_id. this request defines how the data will be loaded into Adrenaline, update_method has optional flag for indexing dataset.\n\n\n\nindex_dataset\n\n index_dataset (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_id:str,\n                session:Optional[aiohttp.client.ClientSession]=None,\n                debug_api:bool=False)\n\nmanually index a dataset\n\n\n\nindex_status\n\n index_status (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_id:str,\n               index_id:str,\n               session:Optional[aiohttp.client.ClientSession]=None,\n               debug_api:bool=False)\n\nget the completion status of an index\n\n# #| export\n# def generate_list_partitions_body(limit=100, offset=0):\n#     return {\n#         \"paginationFields\": [{\n#             \"fieldName\": \"datecompleted\",\n#             \"sortOrder\": \"DESC\",\n#             \"filterValues\": {\n#                 \"MIN\": None,\n#                 \"MAX\": None\n#             }\n#         }],\n#         \"limit\": 1000,\n#         \"offset\": 0\n#     }\n\n\n# #| export\n# async def list_partitions(full_auth: DomoFullAuth,\n#                           dataset_id: str,\n#                           body: dict = None,\n#                           maximum: int = None,\n#                           loop_until_end: bool = True,\n#                           session: aiohttp.ClientSession = None,\n#                           debug: bool = False):\n#     try:\n\n#         is_close_session = False if session else True\n\n#         if not session:\n#             session = aiohttp.ClientSession()\n\n#         body = body or generate_list_partitions_body()\n\n#         url = f\"https://{full_auth.domo_instance}.domo.com/api/query/v1/datasources/{dataset_id}/partition/list\"\n\n#         offset_params = {\n#             'offset': 'offset',\n#             'limit': 'limit',\n#         }\n\n#         def arr_fn(res) -> list[dict]:\n#             return res.response\n\n#         res = await looper(auth=full_auth,\n#                            method='POST',\n#                            url=url,\n#                            arr_fn=arr_fn,\n#                            body=body,\n#                            offset_params_in_body=True,\n#                            offset_params=offset_params,\n#                            loop_until_end=True,\n#                            session=session,\n#                            debug=debug)\n\n#         if isinstance(res, list):\n#             return ResponseGetData(status=200,\n#                                    response=res,\n#                                    is_success=True)\n#         else:\n#             return ResponseGetData(status=400,\n#                                    response=None,\n#                                    is_success=False)\n\n#     finally:\n#         if is_close_session:\n#             await session.close()\n\n# # Delete partition has 3 stages\n# # Stage 1. This marks the data version associated with the partition tag as deleted.  It does not delete the partition tag or remove the association between the partition tag and data version.  There should be no need to upload an empty file ‚Äì step #3 will remove the data from Adrenaline.\n\n\n# #| export\n# async def delete_partition_stage_1(full_auth: DomoFullAuth,\n#                                    dataset_id: str,\n#                                    dataset_partition_id: str,\n#                                    session: aiohttp.ClientSession = None,\n#                                    debug: bool = False):\n\n#     #url = f'https://{full_auth.domo_instance}.domo.com/api/query/v1/datasources/{dataset_id}/partition/{dataset_partition_id}'\n#     # update on 9/9/2022 based on the conversation with Greg Swensen\n#     url = f'https://{full_auth.domo_instance}.domo.com/api/query/v1/datasources/{dataset_id}/tag/{dataset_partition_id}/data'\n\n#     return await get_data(\n#         auth=full_auth,\n#         method=\"DELETE\",\n#         url=url,\n#         session=session,\n#         debug=debug\n#     )\n# # Stage 2. This will remove the partition association so that it doesn‚Äôt show up in the list call.  Technically, this is not required as a partition against a deleted data version will not count against the 400 partition limit, but as the current partitions api doesn‚Äôt make that clear, cleaning these up will make it much easier for you to manage.\n\n\n# #| export\n# async def delete_partition_stage_2(full_auth: DomoFullAuth,\n#                                    dataset_id: str,\n#                                    dataset_partition_id: str,\n#                                    session: aiohttp.ClientSession = None,\n#                                    debug: bool = False):\n\n#     url = f'https://{full_auth.domo_instance}.domo.com/api/query/v1/datasources/{dataset_id}/partition/{dataset_partition_id}'\n\n#     return await get_data(\n#         auth=full_auth,\n#         method=\"DELETE\",\n#         url=url,\n#         session=session,\n#         debug=debug\n#     )\n\n\n# #| export\n# async def delete(full_auth: DomoFullAuth,\n#                  dataset_id: str, session: aiohttp.ClientSession = None, debug: bool = False):\n#     url = f\"https://{full_auth.domo_instance}.domo.com/api/data/v3/datasources/{dataset_id}?deleteMethod=hard\"\n\n#     return await get_data(\n#         auth=full_auth,\n#         method=\"DELETE\",\n#         url=url,\n#         session=session,\n#         debug=debug\n#     )"
  },
  {
    "objectID": "routes/activity_log.html",
    "href": "routes/activity_log.html",
    "title": "Activity Log Routes",
    "section": "",
    "text": "get_activity_log_object_types\n\n get_activity_log_object_types (auth:domolibrary.client.DomoAuth.DomoAuth)\n\nretrieves a list of valid objectTypes that can be used to search the activity_log API\n\nsample implementation of get_activity_log_object_types\n\nimport os\nimport pandas as pd\n\ntry:\n    token_auth = dmda.DomoTokenAuth(\n        domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n        domo_instance=\"domo-dojo\",\n    )\n\n    al_objecttype_res = await get_activity_log_object_types(auth=token_auth)\n\n    print(pd.DataFrame(al_objecttype_res.response))\n\n    # use to update `ActivityLog_ObjectType` enum\n    # [ f\"{objecttype.get('translation').upper().replace(' ', '_')} = '{objecttype.get('type')}'\" for objecttype in  al_objecttype_res.response]\n\nexcept Exception as e:\n    print(e)\n\n                  type         translation\n0         ACCESS_TOKEN        Access token\n1              ACCOUNT             Account\n2         ACTIVITY_LOG        Activity log\n3                ALERT               Alert\n4                  APP                 App\n..                 ...                 ...\n58                VIEW                View\n59        VIRTUAL_USER        Virtual user\n60     Workbench_AGENT     Workbench agent\n61       Workbench_JOB       Workbench job\n62  Workbench_SCHEDULE  Workbench schedule\n\n[63 rows x 2 columns]\n\n\n\n\n\n\nsearch_activity_log\n\n search_activity_log (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      start_time:int, end_time:int, maximum:int,\n                      object_type:str=None,\n                      session:aiohttp.client.ClientSession=None,\n                      debug_api:bool=False, debug_loop:bool=False)\n\nloops over activity log api to retrieve audit logs\n\nimport os\nimport pandas as pd\nimport datetime as dt\n\nimport domolibrary.utils.convert as convert\n\nend_datetime = dt.datetime.today()\nstart_datetime = end_datetime - dt.timedelta(days=100)\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-dojo\",\n)\n\npage_res = await search_activity_log(\n    object_type= 'PAGE',\n    start_time=convert.convert_datetime_to_epoch_millisecond(start_datetime),\n    end_time=convert.convert_datetime_to_epoch_millisecond(end_datetime),\n    auth=token_auth,\n    maximum=16,\n    debug_loop=False,\n)\n\npd.DataFrame(page_res.response[0:5])\n\n\n\n\n\n  \n    \n      \n      objectId\n      objectName\n    \n  \n  \n    \n      0\n      -100000\n      Overview\n    \n    \n      1\n      -100001\n      Alerts\n    \n    \n      2\n      -100002\n      Shared\n    \n    \n      3\n      -100003\n      Favorites\n    \n    \n      4\n      -100012\n      CEO\n    \n  \n\n\n\n\n\nsample implementation of search_activity_log\n\nimport os\nimport pandas as pd\nimport datetime as dt\n\nimport domolibrary.utils.convert as convert\n\nend_datetime = dt.datetime.today()\nstart_datetime = end_datetime - dt.timedelta(days=100)\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-dojo\",\n)\n\nactivity_log_res = await search_activity_log(\n    object_type= 'ACTIVITY_LOG',\n    start_time=convert.convert_datetime_to_epoch_millisecond(start_datetime),\n    end_time=convert.convert_datetime_to_epoch_millisecond(end_datetime),\n    auth=token_auth,\n    maximum=10,\n    debug_loop=False,\n    debug_api=False,\n)\n\npd.DataFrame(activity_log_res.response[0:5])\n\n\n\n\n\n  \n    \n      \n      userName\n      userId\n      userType\n      actorName\n      actorId\n      actionType\n      objectName\n      objectId\n      objectType\n      additionalComment\n      time\n      eventText\n      clientId\n    \n  \n  \n    \n      0\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      UPDATED\n      domo_kbs\n      04c1574e-c8be-4721-9846-c6ffa491144b\n      DATA_SOURCE\n      Jae Wilson updated DataSet domo_kbs.\n      1674594554568\n      Updated DataSet\n      None\n    \n    \n      1\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      UPDATED\n      domo_kbs\n      04c1574e-c8be-4721-9846-c6ffa491144b\n      DATA_SOURCE\n      Jae Wilson updated DataSet domo_kbs.\n      1674594552897\n      Updated DataSet\n      None\n    \n    \n      2\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      UPDATED\n      domo_kbs\n      04c1574e-c8be-4721-9846-c6ffa491144b\n      DATA_SOURCE\n      Jae Wilson updated DataSet domo_kbs.\n      1674594533316\n      Updated DataSet\n      None\n    \n    \n      3\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      UPDATED\n      domo_kbs\n      04c1574e-c8be-4721-9846-c6ffa491144b\n      DATA_SOURCE\n      Jae Wilson updated DataSet domo_kbs.\n      1674594524221\n      Updated DataSet\n      None\n    \n    \n      4\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      LOGGEDIN\n      \n      \n      \n      Jae Wilson logged in. Logged in from IP addres...\n      1674594524209\n      Logged in\n      None"
  },
  {
    "objectID": "routes/user.html",
    "href": "routes/user.html",
    "title": "User Routes",
    "section": "",
    "text": "GET Users\n\n\nget_all_users\n\n get_all_users (auth:domolibrary.client.DomoAuth.DomoAuth,\n                debug_api:bool=False)\n\nretrieves all users from Domo\n\nsample implementation of get_all_users\n\nimport os\nimport pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", \n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nres = await get_all_users(auth=token_auth)\npd.DataFrame(res.response[0:5])\n\n\n\n\n\n  \n    \n      \n      id\n      invitorUserId\n      displayName\n      userName\n      emailAddress\n      accepted\n      userType\n      timeZone\n      modified\n      created\n      role\n      roleId\n      rights\n      active\n      pending\n      systemUser\n      anonymous\n    \n  \n  \n    \n      0\n      0\n      2\n      monitor\n      monitor\n      monitor@domo.com\n      False\n      DOMO_SUPPORT\n      Etc/GMT+7\n      1588877394091\n      1464820854\n      Privileged\n      1\n      31.0\n      True\n      True\n      True\n      True\n    \n    \n      1\n      1006847540\n      1893952720\n      Marc-Anton Clavel\n      marcanton.clavel@domo.com\n      marcanton.clavel@domo.com\n      False\n      USER\n      NaN\n      1665166064000\n      1618579073\n      Privileged\n      2\n      31.0\n      True\n      True\n      False\n      True\n    \n    \n      2\n      1012895591\n      1893952720\n      JeMiller\n      JeMiller@marketaxess.com\n      JeMiller@marketaxess.com\n      True\n      USER\n      NaN\n      1657051684429\n      1657049419\n      NaN\n      2097317660\n      NaN\n      True\n      False\n      False\n      False\n    \n    \n      3\n      1024352013\n      1893952720\n      Michael Shrifteylik\n      mshrifteylik@sportsresearch.com\n      mshrifteylik@sportsresearch.com\n      True\n      USER\n      NaN\n      1669658030028\n      1667838056\n      Privileged\n      2\n      31.0\n      True\n      False\n      False\n      False\n    \n    \n      4\n      1026684838\n      1893952720\n      Ghofrane Yahmadi\n      ghofrane.yahmadi@audibene.de\n      ghofrane.yahmadi@audibene.de\n      False\n      USER\n      NaN\n      1618579110000\n      1618579109\n      Privileged\n      2\n      31.0\n      True\n      True\n      False\n      True\n    \n  \n\n\n\n\n\n\n\n\nSearch Users\nThis series of functions searchse the v1_users_api. The body of the search api can be retrieved by searching admin in the Domo User interface.\n\n\ngenerate_search_users_body_by_id\n\n generate_search_users_body_by_id (user_ids:list[str])\n\nsearch v1_users_search_api\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nuser_ids\nlist\nlist of user ids to search\n\n\nReturns\ndict\ndict to pass to search v1_users_search_api\n\n\n\n\n\n\ngenerate_search_users_body_by_email\n\n generate_search_users_body_by_email (user_email_ls:list[str])\n\nsearch v1_users_search_api\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nuser_email_ls\nlist\nlist of user emails to search. Note: search does not appear to be case sensitive\n\n\nReturns\ndict\ndict to pass to search v1_users_search_api\n\n\n\n\n\n\nprocess_v1_search_users\n\n process_v1_search_users (v1_user_ls:list[dict])\n\nsanitizes the response from v1_users_search API and removes unecessary attributes\n\n\n\n\nType\nDetails\n\n\n\n\nv1_user_ls\nlist\nlist of users from v1_users_search API\n\n\nReturns\nlist\nsanitized list of users.\n\n\n\n\n\n\nsearch_users\n\n search_users (auth:domolibrary.client.DomoAuth.DomoAuth, body:dict,\n               debug_api:bool=False, process_users:bool=True)\n\n\nsample implementation of search_users\n\nimport os\nimport pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", \n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nsearch_email_body = generate_search_users_body_by_email(\n    user_email_ls=[\"jae@onyxreporting.com\"]\n)\n\nres = await search_users(\n    auth=token_auth, \n    body=search_email_body, \n    process_users=True, \n    debug_api=False\n)\n\npd.DataFrame(res.response)\n\n\n\n\n\n  \n    \n      \n    \n  \n  \n  \n\n\n\n\n\n\n\n\nPublish and Virtual Users\n\nVirtual Users are necessary for assigning PDP policies when publish jobs are created.\n\n\n\nsearch_virtual_user_by_subscriber_instance\n\n search_virtual_user_by_subscriber_instance\n                                             (auth:domolibrary.client.Domo\n                                             Auth.DomoAuth, subscriber_ins\n                                             tance_ls:list[str],\n                                             debug_api:bool=False)\n\nretrieve virtual users for subscriber instances tied to one publisher\n\nsample of search virtual users by subscriber_instance\n\nimport os\nimport pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", \n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nres = await search_virtual_user_by_subscriber_instance(\n    auth = token_auth,\n    subscriber_instance_ls = ['domo-dojo', 'test'],\n    debug_api = False\n    )\n\n\npd.DataFrame(res.response)\n\n\n\n\n\n  \n    \n      \n      id\n      publisherDomain\n      customerId\n      subscriberDomain\n      virtualUserId\n      created\n      activeSubscriptions\n    \n  \n  \n    \n      0\n      2bcabab7-128e-4f47-8219-c8548588d7fc\n      domo-dojo.domo.com\n      mmmm-0012-0200\n      domo-dojo.domo.com\n      fc:ce69e5f0-ab88-46df-94ab-32b5f6dfd4e7\n      1674251102000\n      0\n    \n    \n      1\n      57999e9b-e8a2-48ab-80c6-edf2627b71fc\n      domo-dojo.domo.com\n      mmmm-0012-0200\n      test.domo.com\n      fc:b3d7aaa1-9bc8-4481-9d34-c153a9b91b22\n      1674253476000\n      0\n    \n  \n\n\n\n\n\n\n\n\nCRUD Routes and User Attributes\n\n\ncreate_user\n\n create_user (auth:domolibrary.client.DomoAuth.DomoAuth, display_name:str,\n              email:str, role_id:int, debug_api:bool=False)\n\n\n\n\nset_user_landing_page\n\n set_user_landing_page (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        user_id:str, page_id:str, debug_api:bool=False)\n\n\n\n\nreset_password\n\n reset_password (auth:domolibrary.client.DomoAuth.DomoAuth, user_id:str,\n                 new_password:str, debug_api:bool=False)\n\n\n\n\nrequest_password_reset\n\n request_password_reset (domo_instance:str, email:str, locale='en-us',\n                         debug_api:bool=False)"
  },
  {
    "objectID": "client/get_data.html",
    "href": "client/get_data.html",
    "title": "get_data",
    "section": "",
    "text": "get_data_aiohttp\n\n get_data_aiohttp (url:str, method:str,\n                   auth:domolibrary.client.DomoAuth.DomoAuth,\n                   content_type:Optional[dict]=None,\n                   headers:Optional[dict]=None,\n                   session:Optional[aiohttp.client.ClientSession]=None,\n                   body:Union[dict,str,NoneType]=None,\n                   params:Optional[dict]=None, debug_api:bool=False,\n                   process_stream:bool=False, stream_chunks:int=10)\n\nasync wrapper for asyncio requests\n\nsample implementation of get_data\nDuring execution get_data() will attempt to retrieve exchange credentials for an auth token using the dmda.DomoFullAuth.get_auth_token() method.\nThen the appropriate headers will be passed to the request.\n\nimport os\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-dojo\",\n    domo_username=\"jae@onyxreporting.com\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"]\n)\n\nurl = \"https://domo-dojo.domo.com/api/content/v2/users/me\"\n\ntry:\n    res = await get_data_aiohttp(url=url, method=\"get\", auth=full_auth)\n    print(res)\n\nexcept Exception as e:\n    print(e)\n\nResponseGetData(status=200, response={'id': 1893952720, 'invitorUserId': 587894148, 'displayName': 'Jae Wilson', 'department': 'Business Improvement', 'userName': 'jae@onyxreporting.com', 'emailAddress': 'jae@onyxreporting.com', 'avatarKey': 'c605f478-0cd2-4451-9fd4-d82090b71e66', 'accepted': True, 'userType': 'USER', 'modified': 1674100714991, 'created': 1588960518, 'role': 'Admin', 'rights': 63, 'active': True, 'pending': False, 'systemUser': False, 'anonymous': False}, is_success=True)\n\n\n\n\n\n\nget_data\n\n get_data (url:str, method:str, auth:domolibrary.client.DomoAuth.DomoAuth,\n           content_type:Optional[dict]=None, headers:Optional[dict]=None,\n           body:Union[dict,str,NoneType]=None, params:Optional[dict]=None,\n           debug_api:bool=False, session:httpx.AsyncClient=None,\n           return_raw:bool=False)\n\nasync wrapper for asyncio requests\n\nimport os\nimport pandas as pd\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-dojo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nurl = f\"https://{ auth.domo_instance}.domo.com/api/content/v2/users\"\n\nres = await get_data(url = url, method = 'GET', auth = auth, debug_api = False)\n\n# [prop for prop in res.__dict__.keys() if not prop.startswith('__')]\n\npd.DataFrame(res.response[0:5])\n\n\n\n\n\n  \n    \n      \n      id\n      invitorUserId\n      displayName\n      userName\n      emailAddress\n      accepted\n      userType\n      timeZone\n      modified\n      created\n      role\n      roleId\n      rights\n      active\n      pending\n      systemUser\n      anonymous\n    \n  \n  \n    \n      0\n      0\n      2\n      monitor\n      monitor\n      monitor@domo.com\n      False\n      DOMO_SUPPORT\n      Etc/GMT+7\n      1588877394091\n      1464820854\n      Privileged\n      1\n      31.0\n      True\n      True\n      True\n      True\n    \n    \n      1\n      1006847540\n      1893952720\n      Marc-Anton Clavel\n      marcanton.clavel@domo.com\n      marcanton.clavel@domo.com\n      False\n      USER\n      NaN\n      1665166064000\n      1618579073\n      Privileged\n      2\n      31.0\n      True\n      True\n      False\n      True\n    \n    \n      2\n      1012895591\n      1893952720\n      JeMiller\n      JeMiller@marketaxess.com\n      JeMiller@marketaxess.com\n      True\n      USER\n      NaN\n      1657051684429\n      1657049419\n      NaN\n      2097317660\n      NaN\n      True\n      False\n      False\n      False\n    \n    \n      3\n      1024352013\n      1893952720\n      Michael Shrifteylik\n      mshrifteylik@sportsresearch.com\n      mshrifteylik@sportsresearch.com\n      True\n      USER\n      NaN\n      1669658030028\n      1667838056\n      Privileged\n      2\n      31.0\n      True\n      False\n      False\n      False\n    \n    \n      4\n      1026684838\n      1893952720\n      Ghofrane Yahmadi\n      ghofrane.yahmadi@audibene.de\n      ghofrane.yahmadi@audibene.de\n      False\n      USER\n      NaN\n      1618579110000\n      1618579109\n      Privileged\n      2\n      31.0\n      True\n      True\n      False\n      True\n    \n  \n\n\n\n\n\n\n\nLooperError\n\n LooperError (loop_stage:str, message)\n\nCommon base class for all non-exit exceptions.\n\n\n\nlooper\n\n looper (auth:domolibrary.client.DomoAuth.DomoAuth,\n         session:aiohttp.client.ClientSession, url, offset_params,\n         arr_fn:<built-infunctioncallable>, loop_until_end:bool=False,\n         method='POST', body:dict=None, fixed_params:dict=None,\n         offset_params_in_body:bool=False, body_fn=None, limit=1000,\n         skip=0, maximum=2000, debug_api:bool=False,\n         debug_loop:bool=False)"
  },
  {
    "objectID": "client/domoauth.html",
    "href": "client/domoauth.html",
    "title": "DomoAuth",
    "section": "",
    "text": "Stand alone functions for users who prefer a functional programming approach\n\n\n\n\n\n\n get_full_auth (domo_instance:str, domo_username:str, domo_password:str,\n                session:Optional[aiohttp.client.ClientSession]=None,\n                debug_api:bool=False)\n\nuses username and password authentication to retrieve a full_auth access token\n\n\n\nimport os\n\nres = await get_full_auth(\n    domo_instance=\"domo-dojo\",\n    domo_username=\"test@test.com\",\n    domo_password=\"fake password\",\n)\nres\n\nResponseGetData(status=200, response={'success': False, 'reason': 'INVALID_CREDENTIALS'}, is_success=True)\n\n\n\nres = await get_full_auth(domo_instance=\"test\",\n                          domo_username=\"fake@test.com\", \n                          domo_password=\"fake password\")\nres\n\nResponseGetData(status=403, response='Forbidden', is_success=False)\n\n\nThe 403 response is expected because test.domo.com presumeably does not exist or access if forbidden.\n\n\n\n\n\n\n\n\n\n get_developer_auth (domo_client_id:str, domo_client_secret:str,\n                     session:Optional[aiohttp.client.ClientSession]=None,\n                     debug_api:bool=False)\n\nonly use for authenticating against apis documented under developer.domo.com\n\n\nThe 401 response is expected because we are using invalid credentials\n\nawait get_developer_auth(domo_client_id=\"test_id\",\n                         domo_client_secret=\"test_secret\"\n                         )\n\nResponseGetData(status=401, response='Unauthorized', is_success=False)\n\n\n\n\n\n\n\nThis access_token based authentication assumes the user has been provided a valid access token from Domo > Admin > Authentication > Access Token so authentication routes are actually not required.\nPer the Domo JavaCLI implementation, users can test the validity of the access_token agains the ‚Äòme‚Äô API\n!! Note about the Me API !! It appears that access_token authentication will direct the\n\n\n\n\n test_access_token (domo_access_token:str, domo_instance:str,\n                    session:Optional[aiohttp.client.ClientSession]=None,\n                    debug_api:bool=False)\n\nwill attempt to validate against the ‚Äòme‚Äô API. This is the same authentication test the Domo Java CLI uses.\n\n\n\nimport os\n\nawait test_access_token(\n    domo_instance=\"domo-dojo\",\n    domo_access_token=os.environ['DOMO_DOJO_ACCESS_TOKEN']\n)\n\nResponseGetData(status=200, response={'id': 1893952720, 'invitorUserId': 587894148, 'displayName': 'Jae Wilson', 'department': 'Business Improvement', 'userName': 'jae@onyxreporting.com', 'emailAddress': 'jae@onyxreporting.com', 'avatarKey': 'c605f478-0cd2-4451-9fd4-d82090b71e66', 'accepted': True, 'userType': 'USER', 'modified': 1674100714991, 'created': 1588960518, 'role': 'Admin', 'rights': 63, 'active': True, 'pending': False, 'systemUser': False, 'anonymous': False}, is_success=True)"
  },
  {
    "objectID": "client/domoauth.html#domoauth-error-classes",
    "href": "client/domoauth.html#domoauth-error-classes",
    "title": "DomoAuth",
    "section": "DomoAuth Error Classes",
    "text": "DomoAuth Error Classes\n\n\nInvalidInstanceError\n\n InvalidInstanceError (status:Optional[int]=None, message='invalid\n                       instance', domo_instance:Optional[str]=None)\n\nreturn if invalid domo_instance sent to API\n\n\n\nInvalidCredentialsError\n\n InvalidCredentialsError (status:Optional[int]=None, message='invalid\n                          credentials', domo_instance:Optional[str]=None)\n\nreturn invalid credentials sent to API\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstatus\nOptional\nNone\nAPI request status\n\n\nmessage\nstr\ninvalid credentials\n\n\n\ndomo_instance\nOptional\nNone"
  },
  {
    "objectID": "client/domoauth.html#domofullauth",
    "href": "client/domoauth.html#domofullauth",
    "title": "DomoAuth",
    "section": "DomoFullAuth",
    "text": "DomoFullAuth\n\n\nDomoFullAuth\n\n DomoFullAuth (domo_instance:str, domo_username:str, domo_password:str,\n               token:Optional[str]=None, token_name:Optional[str]=None,\n               user_id:Optional[str]=None, auth_header:dict=<factory>,\n               url_manual_login:Optional[str]=None)\n\nuse for full authentication token\n\nsample implementations of DomoFullAuth\n\ntry:\n    full_auth = DomoFullAuth(domo_instance=\"domo-dojo\",\n                             domo_username=\"test12@domo.com\",\n                             domo_password=\"test1234\")\n    res = await full_auth.get_auth_token()\n\nexcept InvalidCredentialsError as e:\n    print(e)\n\nStatus 200 - INVALID_CREDENTIALS at domo-dojo\n\n\n\ntry:\n    full_auth = DomoFullAuth(domo_instance=\"test\",\n                             domo_username=\"test12@domo.com\",\n                             domo_password=\"test1234\")\n    await full_auth.get_auth_token()\nexcept InvalidInstanceError as e:\n    print(e)\n\nStatus 403 - INVALID INSTANCE at test"
  },
  {
    "objectID": "client/domoauth.html#domotokenauth",
    "href": "client/domoauth.html#domotokenauth",
    "title": "DomoAuth",
    "section": "DomoTokenAuth",
    "text": "DomoTokenAuth\n\n\nDomoTokenAuth\n\n DomoTokenAuth (domo_instance:str, domo_access_token:str,\n                token:Optional[str]=None, token_name:Optional[str]=None,\n                user_id:Optional[str]=None, auth_header:dict=<factory>,\n                url_manual_login:Optional[str]=None)\n\nuse for access_token authentication. Tokens are generated in domo > admin > access token Necessary in cases where direct sign on is not permitted\n\nSample implementation of DomoTokenAuth\n\ntry:\n    domo_auth = DomoTokenAuth(domo_instance=\"domo-dojo\",\n                              domo_access_token='fake password')\n    token = await domo_auth.get_auth_token()\n    print(domo_auth)\n\nexcept InvalidCredentialsError as e:\n    print(e)\n\nStatus 401 - Unauthorized at domo-dojo"
  },
  {
    "objectID": "client/domoauth.html#domodeveloperauth",
    "href": "client/domoauth.html#domodeveloperauth",
    "title": "DomoAuth",
    "section": "DomoDeveloperAuth",
    "text": "DomoDeveloperAuth\n\n\nDomoDeveloperAuth\n\n DomoDeveloperAuth (domo_client_id:str, domo_client_secret:str)\n\nuse for full authentication token\n\nSample implementations of DomoDeveloperAuth\n\ndomo_client_id = \"test_client\"\ndomo_client_secret = \"test_secret\"\n\ntry:\n    domo_auth = DomoDeveloperAuth(domo_client_id, domo_client_secret)\n    await domo_auth.get_auth_token()\nexcept InvalidCredentialsError as e:\n    print(e)\n\nStatus 401 - Unauthorized"
  },
  {
    "objectID": "client/responsegetdata.html#asyncio-response-handling",
    "href": "client/responsegetdata.html#asyncio-response-handling",
    "title": "ResponseGetData",
    "section": "Asyncio Response Handling",
    "text": "Asyncio Response Handling\n\n\nResponseGetData._from_aiohttp_response\n\n ResponseGetData._from_aiohttp_response\n                                         (res:aiohttp.client_reqrep.Client\n                                         Response, auth:Optional[<built-\n                                         infunctionany>]=None,\n                                         process_stream:bool=False,\n                                         stream_chunks:int=10,\n                                         debug_api:bool=False)\n\nasync method returns ResponseGetData\n\n# test _from_aiohttp_response returns ResponseGetData class\n\nimport os\nimport requests\n\nurl = f\"https://domo-dojo.domo.com/api/content/v2/authentication\"\n\nbody = {\n    \"method\": \"password\",\n    \"emailAddress\": \"jae@onyxreporting.com\",\n    \"password\": os.environ[\"DOJO_PASSWORD\"],\n}\n\nsession = aiohttp.ClientSession()\nres = await session.post(url=url, json=body)\nawait session.close()\n\nprint(res.status)\n\ntest_res = await ResponseGetData._from_aiohttp_response(res)\ntest_res.__dict__.keys()\n\n200\n\n\ndict_keys(['status', 'response', 'is_success', 'auth'])"
  },
  {
    "objectID": "client/logger.html#logger-traceback-methods",
    "href": "client/logger.html#logger-traceback-methods",
    "title": "Logger",
    "section": "Logger traceback methods",
    "text": "Logger traceback methods\nPrivate methods for adding traceback details to logs\n\n\nLogger._get_traceback\n\n Logger._get_traceback (root_module:str='<module>', num_stacks_to_drop=0)\n\nmethod that retrieves traceback\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nroot_module\nstr\n\n\n\n\nnum_stacks_to_drop\nint\n0\ndrop entries from the top of stack to exclude the functions that retrieve the traceback\n\n\nReturns\n[<class ‚Äòtraceback.FrameSummary‚Äô>]\n\n\n\n\n\n\n\n\nTracebackDetails\n\n TracebackDetails (function_name:str, file_name:str, function_trail:str)\n\nresult of _get_traceback_details function\n\n\n\nLogger._get_traceback_details\n\n Logger._get_traceback_details\n                                (traceback_list:[<class'traceback.FrameSum\n                                mary'>])\n\nreturns TracebackDetails, for the entry at the top of the stack\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ntraceback_list\n[<class ‚Äòtraceback.FrameSummary‚Äô>]\n\n\n\nReturns\nTracebackDetails\ndescriptive summary from the top of the traceback\n\n\n\n\n\nsample implementations of stack tracing methods\n\nimport pandas as pd\n\n\ndef custom_write_logs_fn(logs):\n    print(\"printing logs\")\n    return pd.DataFrame(logs)\n\n\nlogger = Logger(app_name=\"test\", output_fn=custom_write_logs_fn)\n\n\ndef test_trace():\n    return logger._get_traceback(num_stacks_to_drop=1)\n\n\n# print traceback for the test_trace function\n# notice with num_stacks_to_drop = 1 we exclude the _get_traceback function from the traceback\ntb = test_trace()\nprint({\"traceback function\": [line[2] for line in tb]})\n\n\ndef test_get_details():\n    tb = logger._get_traceback(num_stacks_to_drop=1)\n    return logger._get_traceback_details(tb)\n\n\n# print traceback details for test_get_details function\ntest_get_details().__dict__\n\n{'traceback function': ['<module>', 'test_trace']}\n\n\n{'function_name': 'test_get_details',\n 'file_name': '<ipython-input-1-67d667b8d98b>',\n 'function_trail': '<module> -> test_get_details'}\n\n\n\n# assert that the result of test_trace is of type FrameSummary\ntest_eq(type(tb[0]), traceback.FrameSummary)"
  },
  {
    "objectID": "client/logger.html#logger-logging-methods",
    "href": "client/logger.html#logger-logging-methods",
    "title": "Logger",
    "section": "Logger logging methods",
    "text": "Logger logging methods\n\n\nLogger.log_warning\n\n Logger.log_warning (message, entity_id:Optional[str]=None,\n                     domo_instance:Optional[str]=None, debug_log=False,\n                     num_stacks_to_drop=3)\n\nlog a warning message\n\n\n\nLogger.log_error\n\n Logger.log_error (message, entity_id:Optional[str]=None,\n                   domo_instance:Optional[str]=None, debug_log=False,\n                   num_stacks_to_drop=3)\n\nlog an error message\n\n\n\nLogger.log_info\n\n Logger.log_info (message, entity_id:Optional[str]=None,\n                  domo_instance:Optional[str]=None, debug_log=False,\n                  num_stacks_to_drop=3)\n\nlog an informational message\n\nlogger = Logger(app_name=\"test\", output_fn=custom_write_logs_fn)\n\n\ndef test_log():\n    return logger.log_info(\"test the error returns type Info\", debug_log=False)\n\n\ntest_log()\n\nNameError: name 'Logger' is not defined"
  },
  {
    "objectID": "client/logger.html#outputting-logs",
    "href": "client/logger.html#outputting-logs",
    "title": "Logger",
    "section": "Outputting Logs",
    "text": "Outputting Logs\nDuring Logger instantiation, users can pass a function, output_fn which will be called with the Logger.output_log method\n\n\nLogger.output_log\n\n Logger.output_log ()\n\ncalls the user defined output function\n\nSample implementation with a custom write_logs method\n\nimport pandas as pd\n\ndef custom_write_logs_fn(logs):\n    print(\"printing logs\")\n    return pd.DataFrame(logs)\n\n\nlogger = Logger(app_name=\"test\", output_fn=custom_write_logs_fn)\n\n\ndef test_error():\n    try:\n        if 1 == 1:\n            raise Exception(\"random error\")\n\n    except Exception as e:\n        logger.log_error(e)\n\n\ndef double_test():\n    test_error()\n\n\n# record first error\ntest_error()\n\n# records second error nested inside double_test()\ndouble_test()\n\nlogger.output_log()\n\nprinting logs\n\n\n\n\n\n\n  \n    \n      \n      date_time\n      application\n      log_type\n      log_message\n      breadcrumb\n      domo_instance\n      entity_id\n      function_name\n      file_name\n      function_trail\n    \n  \n  \n    \n      0\n      2023-01-24 21:09:21.687529\n      test\n      Error\n      random error\n      \n      None\n      None\n      test_error\n      <ipython-input-1-235f75018073>\n      <module> -> test_error\n    \n    \n      1\n      2023-01-24 21:09:21.687760\n      test\n      Error\n      random error\n      \n      None\n      None\n      test_error\n      <ipython-input-1-235f75018073>\n      <module> -> double_test -> test_error"
  }
]