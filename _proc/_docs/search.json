[
  {
    "objectID": "client/get_data.html",
    "href": "client/get_data.html",
    "title": "get_data",
    "section": "",
    "text": "source\n\nget_data\n\n get_data (url:str, method:str, auth:domolibrary.DomoAuth.DomoAuth,\n           content_type:Optional[dict]=None, headers:Optional[dict]=None,\n           session:Optional[aiohttp.client.ClientSession]=None,\n           body:Union[dict,str,NoneType]=None, params:Optional[dict]=None,\n           debug_api:bool=False)\n\nasync wrapper for asyncio requests\n\nsample implementation of get_data\nDuring execution get_data() will attempt to retrieve exchange credentials for an auth token using the dmda.DomoFullAuth.get_auth_token() method.\nThen the appropriate headers will be passed to the request.\n\nimport os\n\ndomo_password = os.environ[\"DOJO_PASSWORD\"]\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-dojo\",\n    domo_username=\"jae@onyxreporting.com\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"]\n)\n\nurl = \"https://domo-dojo.domo.com/api/content/v2/users/me\"\n\ntry:\n    res = await get_data(url=url, method=\"get\", auth=full_auth)\n    print(res)\n\nexcept Exception as e:\n    print(e)\n\nResponseGetData(status=200, response={'id': 1893952720, 'invitorUserId': 587894148, 'displayName': 'Jae Wilson', 'userName': 'jae@onyxreporting.com', 'emailAddress': 'jae@onyxreporting.com', 'avatarKey': 'c605f478-0cd2-4451-9fd4-d82090b71e66', 'accepted': True, 'userType': 'USER', 'modified': 1651692505000, 'created': 1588960518, 'role': 'Admin', 'rights': 63, 'active': True, 'pending': False, 'systemUser': False, 'anonymous': False}, is_success=True, auth=None)\n\n\n\nsource\n\n\n\nlooper\n\n looper (auth:domolibrary.DomoAuth.DomoAuth,\n         session:aiohttp.client.ClientSession, url, offset_params,\n         arr_fn:<built-infunctioncallable>, loop_until_end:bool=False,\n         method='POST', body:dict=None, fixed_params:dict=None,\n         offset_params_in_body:bool=False, body_fn=None, limit=1000,\n         maximum=2000, debug_api:bool=False, debug_loop:bool=False)"
  },
  {
    "objectID": "client/responsegetdata.html",
    "href": "client/responsegetdata.html",
    "title": "ResponseGetData",
    "section": "",
    "text": "source\n\nResponseGetData\n\n ResponseGetData (status:int, response:<built-infunctionany>,\n                  is_success:bool, auth:dict=None)\n\npreferred response class for all API Requests\n\nrgd = ResponseGetData(status=200, response=\"test\", is_success=True)\nrgd\n\nResponseGetData(status=200, response='test', is_success=True, auth=None)\n\n\n\n\nClassmethods from Response objects by library\nThis code base supports two API request libraries, requests.request (synchronous) and aiohttp.ClientRequest (asynchronous) this can be extended as new libraries emerge with different performance characteristics.\n\nsource\n\nResponseGetData._from_requests_response\n\n ResponseGetData._from_requests_response (res:requests.models.Response)\n\nreturns ResponseGetData\n\n\n\n\nType\nDetails\n\n\n\n\nres\nResponse\nrequests response object\n\n\nReturns\nResponseGetData\n\n\n\n\n\n# test _from_requests_response returns ResponseGetData class\nimport os\nimport requests\n\nurl = f\"https://domo-dojo.domo.com/api/content/v2/authentication\"\n\ntokenHeaders = {\"Content-Type\": \"application/json\"}\n\nbody = {\n    \"method\": \"password\",\n    \"emailAddress\": \"jae@onyxreporting.com\",\n    \"password\": os.environ[\"DOJO_PASSWORD\"],\n}\n\nres = requests.request(method=\"POST\", url=url, json=body, headers=tokenHeaders)\n\nprint(res.status_code)\n\ntest_res = ResponseGetData._from_requests_response(res)\ntest_res.__dict__.keys()\n\n200\n\n\ndict_keys(['status', 'response', 'is_success', 'auth'])\n\n\n\nsource\n\n\nResponseGetData._from_aiohttp_response\n\n ResponseGetData._from_aiohttp_response\n                                         (res:aiohttp.client_reqrep.Client\n                                         Response)\n\nasync method returns ResponseGetData\n\n# test _from_aiohttp_response returns ResponseGetData class\n\nimport os\nimport requests\n\n\nurl = f\"https://domo-dojo.domo.com/api/content/v2/authentication\"\n\nbody = {\n    \"method\": \"password\",\n    \"emailAddress\": \"jae@onyxreporting.com\",\n    \"password\": os.environ[\"DOJO_PASSWORD\"],\n}\n\nsession = aiohttp.ClientSession()\nres = await session.post(url=url, json=body)\nawait session.close()\n\nprint(res.status)\n\ntest_res = await ResponseGetData._from_aiohttp_response(res)\ntest_res.__dict__.keys()\n\n200\n\n\ndict_keys(['status', 'response', 'is_success', 'auth'])"
  },
  {
    "objectID": "routes/activity_log.html",
    "href": "routes/activity_log.html",
    "title": "Activity Log Routes",
    "section": "",
    "text": "source\n\nget_activity_log_object_types\n\n get_activity_log_object_types (auth:domolibrary.DomoAuth.DomoAuth)\n\nretrieves a list of valid objectTypes that can be used to search the activity_log API\n\nsample implementation of get_activity_log_object_types\n\nimport os\nimport pandas as pd\n\ntry:\n    token_auth = dmda.DomoTokenAuth(\n        domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n        domo_instance=\"domo-dojo\",\n    )\n\n    al_objecttype_res = await get_activity_log_object_types(auth=token_auth)\n\n    print(pd.DataFrame(al_objecttype_res.response))\n\n    # use to update `ActivityLog_ObjectType` enum\n    # [ f\"{objecttype.get('translation').upper().replace(' ', '_')} = '{objecttype.get('type')}'\" for objecttype in  al_objecttype_res.response]\n\nexcept Exception as e:\n    print(e)\n\n                  type         translation\n0         ACCESS_TOKEN        Access token\n1              ACCOUNT             Account\n2         ACTIVITY_LOG        Activity log\n3                ALERT               Alert\n4                  APP                 App\n..                 ...                 ...\n56                VIEW                View\n57        VIRTUAL_USER        Virtual user\n58     Workbench_AGENT     Workbench agent\n59       Workbench_JOB       Workbench job\n60  Workbench_SCHEDULE  Workbench schedule\n\n[61 rows x 2 columns]\n\n\n\nsource\n\n\n\nsearch_activity_log\n\n search_activity_log (auth:domolibrary.DomoAuth.DomoAuth, start_time:int,\n                      end_time:int, maximum:int, object_type:str=None,\n                      session:aiohttp.client.ClientSession=None,\n                      debug_api:bool=False, debug_loop:bool=False)\n\nloops over activity log api to retrieve audit logs\n\nimport os\nimport pandas as pd\nimport datetime as dt\n\nimport domolibrary.utils.convert as convert\n\nend_datetime = dt.datetime.today()\nstart_datetime = end_datetime - dt.timedelta(days=100)\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-dojo\",\n)\n\npage_res = await search_activity_log(\n    object_type= 'PAGE',\n    start_time=convert.convert_datetime_to_epoch_millisecond(start_datetime),\n    end_time=convert.convert_datetime_to_epoch_millisecond(end_datetime),\n    auth=token_auth,\n    maximum=16,\n    debug_loop=False,\n)\n\npd.DataFrame(page_res.response[0:5])\n\n\n\n\n\n  \n    \n      \n      objectId\n      objectName\n    \n  \n  \n    \n      0\n      -100000\n      Overview\n    \n    \n      1\n      -100001\n      Alerts\n    \n    \n      2\n      -100002\n      Shared\n    \n    \n      3\n      -100003\n      Favorites\n    \n    \n      4\n      -100012\n      CEO\n    \n  \n\n\n\n\n\nsample implementation of search_activity_log\n\nimport os\nimport pandas as pd\nimport datetime as dt\n\nimport domolibrary.utils.convert as convert\n\nend_datetime = dt.datetime.today()\nstart_datetime = end_datetime - dt.timedelta(days=100)\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-dojo\",\n)\n\nactivity_log_res = await search_activity_log(\n    object_type= 'ACTIVITY_LOG',\n    start_time=convert.convert_datetime_to_epoch_millisecond(start_datetime),\n    end_time=convert.convert_datetime_to_epoch_millisecond(end_datetime),\n    auth=token_auth,\n    maximum=10,\n    debug_loop=False,\n    debug_api=False,\n)\n\npd.DataFrame(activity_log_res.response[0:5])\n\n\n\n\n\n  \n    \n      \n      userName\n      userId\n      userType\n      actorName\n      actorId\n      actionType\n      objectName\n      objectId\n      objectType\n      additionalComment\n      time\n      eventText\n      clientId\n    \n  \n  \n    \n      0\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      LOGGEDIN\n      \n      \n      \n      Jae Wilson logged in. Logged in from IP addres...\n      1673052695222\n      Logged in\n      None\n    \n    \n      1\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      LOGGEDIN\n      \n      \n      \n      Jae Wilson logged in. Logged in from IP addres...\n      1673052694881\n      Logged in\n      None\n    \n    \n      2\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      LOGGEDIN\n      \n      \n      \n      Jae Wilson logged in. Logged in from IP addres...\n      1673052694218\n      Logged in\n      None\n    \n    \n      3\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      LOGGEDIN\n      \n      \n      \n      Jae Wilson logged in. Logged in from IP addres...\n      1673050902586\n      Logged in\n      None\n    \n    \n      4\n      test12@domo.com\n      test12@domo.com\n      USER\n      \n      0\n      FAILED_LOGIN\n      \n      \n      \n      test12@domo.com failed logging in. Logged in f...\n      1673050902494\n      Failed login\n      None"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "domo_library",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "domo_library",
    "section": "Install",
    "text": "Install\npip install domo_library"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "domo_library",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "domoauth.html",
    "href": "domoauth.html",
    "title": "DomoAuth",
    "section": "",
    "text": "Stand alone functions for users who prefer a functional programming approach\n\n\n\nsource\n\n\n\n get_full_auth (domo_instance:str, domo_username:str, domo_password:str,\n                session:Optional[aiohttp.client.ClientSession]=None)\n\nuses username and password authentication to retrieve a full_auth access token\n\n\n\nimport os\n\nres = await get_full_auth(\n    domo_instance=\"domo-dojo\",\n    domo_username=\"test@test.com\",\n    domo_password=\"fake password\",\n)\nres\n\nResponseGetData(status=200, response={'success': False, 'reason': 'INVALID_CREDENTIALS'}, is_success=True, auth=None)\n\n\n\nres = await get_full_auth(domo_instance=\"test\",\n                          domo_username=\"fake@test.com\", \n                          domo_password=\"fake password\")\nres\n\nResponseGetData(status=403, response='Forbidden', is_success=False, auth=None)\n\n\nThe 403 response is expected because test.domo.com presumeably does not exist or access if forbidden.\n\n\n\n\n\n\nsource\n\n\n\n get_developer_auth (domo_client_id:str, domo_client_secret:str,\n                     session:Optional[aiohttp.client.ClientSession]=None)\n\nonly use for authenticating against apis documented under developer.domo.com\n\n\nThe 401 response is expected because we are using invalid credentials\n\nawait get_developer_auth(domo_client_id=\"test_id\",\n                         domo_client_secret=\"test_secret\"\n                         )\n\nResponseGetData(status=401, response='Unauthorized', is_success=False, auth=None)\n\n\n\n\n\n\n\nThis access_token based authentication assumes the user has been provided a valid access token from Domo > Admin > Authentication > Access Token so authentication routes are actually not required.\nPer the Domo JavaCLI implementation, users can test the validity of the access_token agains the ‘me’ API\n!! Note about the Me API !! It appears that access_token authentication will direct the\n\nsource\n\n\n\n test_access_token (domo_access_token:str, domo_instance:str,\n                    session:Optional[aiohttp.client.ClientSession]=None)\n\nwill attempt to validate against the ‘me’ API. This is the same authentication test the Domo Java CLI uses.\n\n\n\nimport os\n\nawait test_access_token(\n    domo_instance=\"domo-dojo\",\n    domo_access_token=os.environ['DOMO_DOJO_ACCESS_TOKEN']\n)\n\nResponseGetData(status=200, response={'id': 1893952720, 'invitorUserId': 587894148, 'displayName': 'Jae Wilson', 'userName': 'jae@onyxreporting.com', 'emailAddress': 'jae@onyxreporting.com', 'avatarKey': 'c605f478-0cd2-4451-9fd4-d82090b71e66', 'accepted': True, 'userType': 'USER', 'modified': 1651692505000, 'created': 1588960518, 'role': 'Admin', 'rights': 63, 'active': True, 'pending': False, 'systemUser': False, 'anonymous': False}, is_success=True, auth=None)"
  },
  {
    "objectID": "domoauth.html#domoauth-error-classes",
    "href": "domoauth.html#domoauth-error-classes",
    "title": "DomoAuth",
    "section": "DomoAuth Error Classes",
    "text": "DomoAuth Error Classes\n\nsource\n\nInvalidInstanceError\n\n InvalidInstanceError (status:Optional[int]=None, message='invalid\n                       instance', domo_instance:Optional[str]=None)\n\nreturn if invalid domo_instance sent to API\n\nsource\n\n\nInvalidCredentialsError\n\n InvalidCredentialsError (status:Optional[int]=None, message='invalid\n                          credentials', domo_instance:Optional[str]=None)\n\nreturn invalid credentials sent to API\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstatus\nOptional\nNone\nAPI request status\n\n\nmessage\nstr\ninvalid credentials\n\n\n\ndomo_instance\nOptional\nNone"
  },
  {
    "objectID": "domoauth.html#domofullauth",
    "href": "domoauth.html#domofullauth",
    "title": "DomoAuth",
    "section": "DomoFullAuth",
    "text": "DomoFullAuth\n\nsource\n\nDomoFullAuth\n\n DomoFullAuth (domo_instance:str, domo_username:str, domo_password:str,\n               token:Optional[str]=None, token_name:Optional[str]=None,\n               user_id:Optional[str]=None, auth_header:dict=<factory>,\n               url_manual_login:Optional[str]=None)\n\nuse for full authentication token\n\nsample implementations of DomoFullAuth\n\ntry:\n    full_auth = DomoFullAuth(domo_instance=\"domo-dojo\",\n                             domo_username=\"test12@domo.com\",\n                             domo_password=\"test1234\")\n    res = await full_auth.get_auth_token()\n\nexcept InvalidCredentialsError as e:\n    print(e)\n\nStatus 200 - INVALID_CREDENTIALS at domo-dojo\n\n\n\ntry:\n    full_auth = DomoFullAuth(domo_instance=\"test\",\n                             domo_username=\"test12@domo.com\",\n                             domo_password=\"test1234\")\n    await full_auth.get_auth_token()\nexcept InvalidInstanceError as e:\n    print(e)\n\nStatus 403 - INVALID INSTANCE at test"
  },
  {
    "objectID": "domoauth.html#domotokenauth",
    "href": "domoauth.html#domotokenauth",
    "title": "DomoAuth",
    "section": "DomoTokenAuth",
    "text": "DomoTokenAuth\n\nsource\n\nDomoTokenAuth\n\n DomoTokenAuth (domo_instance:str, domo_access_token:str,\n                token:Optional[str]=None, token_name:Optional[str]=None,\n                user_id:Optional[str]=None, auth_header:dict=<factory>,\n                url_manual_login:Optional[str]=None)\n\nuse for access_token authentication. Tokens are generated in domo > admin > access token Necessary in cases where direct sign on is not permitted\n\nSample implementation of DomoTokenAuth\n\ntry:\n    domo_auth = DomoTokenAuth(domo_instance=\"domo-dojo\",\n                              domo_access_token='fake password')\n    token = await domo_auth.get_auth_token()\n    print(domo_auth)\n\nexcept InvalidCredentialsError as e:\n    print(e)\n\nStatus 401 - Unauthorized at domo-dojo"
  },
  {
    "objectID": "domoauth.html#domodeveloperauth",
    "href": "domoauth.html#domodeveloperauth",
    "title": "DomoAuth",
    "section": "DomoDeveloperAuth",
    "text": "DomoDeveloperAuth\n\nsource\n\nDomoDeveloperAuth\n\n DomoDeveloperAuth (domo_client_id:str, domo_client_secret:str)\n\nuse for full authentication token\n\nSample implementations of DomoDeveloperAuth\n\ndomo_client_id = \"test_client\"\ndomo_client_secret = \"test_secret\"\n\ntry:\n    domo_auth = DomoDeveloperAuth(domo_client_id, domo_client_secret)\n    await domo_auth.get_auth_token()\nexcept InvalidCredentialsError as e:\n    print(e)\n\nStatus 401 - Unauthorized"
  },
  {
    "objectID": "utils/utils.convert.html",
    "href": "utils/utils.convert.html",
    "title": "Conversion utility functions",
    "section": "",
    "text": "source\n\nconvert_epoch_millisecond_to_datetime\n\n convert_epoch_millisecond_to_datetime (epoch:int)\n\nconvert Epoch time with miliseconds to Date time\n\nsource\n\n\nconvert_datetime_to_epoch_millisecond\n\n convert_datetime_to_epoch_millisecond (datetime:datetime.datetime)\n\nconvert DateTime to Epoch time with Miliseconds\n\nimport time\nimport datetime as dt \n\ncur_time = int(time.time()*1000)\n\ncur_datetime =  convert_epoch_millisecond_to_datetime(cur_time)\nprint(cur_datetime)\n\ntest_time = convert_datetime_to_epoch_millisecond(cur_datetime)\nprint(test_time)\n\nfctest.test_eq(test_time, cur_time)\n\n2023-01-07 00:51:35.572000\n1673052695572\n\n\n\nsource\n\n\nconvert_snake_to_pascal\n\n convert_snake_to_pascal (str)\n\nconverts ‘snake_case_str’ to ‘snakeCaseStr’\n\nconvert_str = 'test_snake_case'\n\nconvert_snake_to_pascal(convert_str)\n\n'testSnakeCase'"
  },
  {
    "objectID": "utils/dictdot.html",
    "href": "utils/dictdot.html",
    "title": "DictDot",
    "section": "",
    "text": "source\n\nDictDot\n\n DictDot (dictionary:dict, **kwargs)\n\na utility class that converts json into an object that supports data retrieval with dot notation\n\n\n\n\nType\nDetails\n\n\n\n\ndictionary\ndict\ndictionary to convert\n\n\nkwargs\n\n\n\n\n\n\nsample implementation of DictDot\n\nfoo = { \"name\": \"my object\", \"description\" : \"please convert me\", \"type\": \"a good old fashioned dictionary\"}\n\ndd = DictDot(foo)\n\nprint(dd)\n\ndd.type\n\nDictDot(name='my object', description='please convert me', type='a good old fashioned dictionary')\n\n\n'a good old fashioned dictionary'"
  },
  {
    "objectID": "routes/activity_log.html#activity-log-routes",
    "href": "routes/activity_log.html#activity-log-routes",
    "title": "Activity Log",
    "section": "Activity Log Routes",
    "text": "Activity Log Routes\n\nsource\n\nsearch_activity_log\n\n search_activity_log (domo_auth:domolibrary.DomoAuth.DomoAuth,\n                      start_time:int, end_time:int, maximum:int, object_ty\n                      pe:Optional[__main__.ActivityLog_ObjectType]=None,\n                      session:aiohttp.client.ClientSession=None,\n                      debug_api:bool=False, debug_loop:bool=False)\n\nloops over activity log api to retrieve audit logs\n\nimport os\nimport pandas as pd\nimport datetime as dt\n\nimport domolibrary.utils.convert as convert\n\nend_datetime = dt.datetime.today()\nstart_datetime = end_datetime - dt.timedelta(days=100)\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-dojo\",\n)\n\npage_res = await search_activity_log(\n    object_type=ActivityLog_ObjectType.PAGE,\n    start_time=convert.convert_datetime_to_epoch_millisecond(start_datetime),\n    end_time=convert.convert_datetime_to_epoch_millisecond(end_datetime),\n    domo_auth=token_auth,\n    maximum=16,\n    debug_loop=False,\n)\n\npd.DataFrame(page_res[10:15])\n\n\n\n\n\n  \n    \n      \n      objectId\n      objectName\n    \n  \n  \n    \n      0\n      1040607753\n      Campaigns\n    \n    \n      1\n      1050465610\n      MetaData Table Info and QA\n    \n    \n      2\n      1055094721\n      Scott's CRM APP\n    \n    \n      3\n      1067418640\n      Form Builder\n    \n    \n      4\n      1080655546\n      Cloud Costs\n    \n  \n\n\n\n\n\nsample implementation of search_activity_log\n\nimport os\nimport pandas as pd\nimport datetime as dt\n\nimport domolibrary.utils.convert as convert\n\nend_datetime = dt.datetime.today()\nstart_datetime = end_datetime - dt.timedelta(days=100)\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-dojo\",\n)\n\nactivity_log_res = await search_activity_log(\n    object_type=ActivityLog_ObjectType.ACTIVITY_LOG,\n    start_time=convert.convert_datetime_to_epoch_millisecond(start_datetime),\n    end_time=convert.convert_datetime_to_epoch_millisecond(end_datetime),\n    domo_auth=token_auth,\n    maximum=100,\n    debug_loop=False,\n    debug_api=False,\n)\n\npd.DataFrame(activity_log_res[95:100])\n\n\n\n\n\n  \n    \n      \n      userName\n      userId\n      userType\n      actorName\n      actorId\n      actionType\n      objectName\n      objectId\n      objectType\n      additionalComment\n      time\n      eventText\n      clientId\n    \n  \n  \n    \n      0\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      LOGGEDIN\n      \n      \n      \n      Jae Wilson logged in. Logged in from IP addres...\n      1673044017279\n      Logged in\n      None\n    \n    \n      1\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      LOGGEDIN\n      \n      \n      \n      Jae Wilson logged in. Logged in from IP addres...\n      1673044016676\n      Logged in\n      None\n    \n    \n      2\n      test@test.com\n      test@test.com\n      USER\n      \n      0\n      FAILED_LOGIN\n      \n      \n      \n      test@test.com failed logging in. Logged in fro...\n      1673044016554\n      Failed login\n      None\n    \n    \n      3\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      LOGGEDIN\n      \n      \n      \n      Jae Wilson logged in. Logged in from IP addres...\n      1673043933005\n      Logged in\n      None\n    \n    \n      4\n      Jae Wilson\n      1893952720\n      USER\n      \n      0\n      LOGGEDIN\n      \n      \n      \n      Jae Wilson logged in. Logged in from IP addres...\n      1673043931236\n      Logged in\n      None"
  },
  {
    "objectID": "classes/domoactivitylog.html",
    "href": "classes/domoactivitylog.html",
    "title": "Activity Log",
    "section": "",
    "text": "To get an updated list of objectTypes run the get_activity_log_object_types function.\nNote: in the ActivityLog_ObjectType enum, some of the entries have been renamed for clarity.\n\nclass ActivityLog_ObjectType(Enum):\n    \"\"\"enumerates valid object types to pass to activity log api\"\"\"\n\n    ACCESS_TOKEN = \"ACCESS_TOKEN\"\n    ACCOUNT = \"ACCOUNT\"\n    ACTIVITY_LOG = \"ACTIVITY_LOG\"\n    ALERT = \"ALERT\"\n    APP = \"APP\"\n    APPDB_COLLECTION = \"MAGNUM_COLLECTION\"\n    APPDB_DATASTORE = \"MAGNUM_DATASTORE\"\n    AUTHORITY = \"AUTHORITY\"\n    BEAST_MODE_FORMULA = \"BEAST_MODE_FORMULA\"\n    BUZZ_CHANNEL = \"CHANNEL\"\n    BUZZ_GROUP_CHAT = \"GROUP_CHAT\"\n    BUZZ_THREAD = \"HUDDLE\"\n    CARD = \"CARD\"\n    CHART_COLOR_PALETTE = \"CHART_COLOR_PALETTE\"\n    COLLECTION = \"COLLECTION\"\n    CUSTOMER = \"CUSTOMER\"\n    CUSTOMER_STATE = \"CUSTOMER_STATE\"\n    CUSTOMER_TIER = \"CUSTOMER_TIER\"\n    DATA_SCIENCE_NOTEBOOK = \"DATA_SCIENCE_NOTEBOOK\"\n    DATAFLOW = \"DATAFLOW_TYPE\"\n    DATASET = \"DATA_SOURCE\"\n    DATASOURCE = \"DATASOURCE\"\n    DEPLOYMENT = \"DEPLOYMENT\"\n    DRILL_VIEW = \"DRILL_VIEW\"\n    EASY_INVITE_LINK = \"EASY_INVITE_LINK\"\n    ENABLED = \"ENABLED\"\n    FILE = \"FILE\"\n    FILE_VERSION = \"FILE_REVISION\"\n    GROUP = \"GROUP\"\n    LICENSE_PAGE = \"LICENSE_PAGE\"\n    LOGIN_SETTINGS = \"LOGIN_SETTINGS\"\n    NAME = \"NAME\"\n    PDP_FILTER = \"ADC_FILTER\"\n    PDP_POLICY = \"ADC_POLICY\"\n    PAGE = \"PAGE\"\n    PAGE_ANALYZER = \"PAGE_ANALYZER\"\n    PAGE_COLLECTION = \"PAGE_COLLECTION\"\n    PROJECT = \"PROJECT\"\n    PROJECT_LIST = \"PROJECT_LIST\"\n    PROJECT_TASK = \"PROJECT_TASK\"\n    PROJECT_TASK_ATTACHMENT = \"PROJECT_TASK_ATTACHMENT\"\n    PROJECT_TASK_OWNER = \"PROJECT_TASK_OWNER\"\n    PROXIER_EMAIL = \"PROXIER_EMAIL\"\n    PUBLIC_EMBED_URL = \"PUBLIC_URL\"\n    PUBLICATION = \"PUBLICATION\"\n    REPOSITORY = \"REPOSITORY\"\n    REPOSITORY_AUTHORIZATION = \"REPOSITORY_AUTHORIZATION\"\n    ROLE = \"ROLE\"\n    SEGMENT = \"SEGMENT\"\n    SSO_PAGE = \"SSO_PAGE\"\n    SUBSCRIBER = \"PROXY_USER\"\n    USER = \"USER\"\n    USER_STATE = \"USER_STATE\"\n    VARIABLE = \"VARIABLE\"\n    VARIABLE_CONTROL = \"VARIABLE_CONTROL\"\n    NOTEBOOK_VIEW = \"CONTAINER_VIEW\"\n    VIEW = \"VIEW\"\n    VIRTUAL_USER = \"VIRTUAL_USER\"\n    WORKBENCH_AGENT = \"Workbench_AGENT\"\n    WORKBENCH_JOB = \"Workbench_JOB\"\n    WORKBENCH_SCHEDULE = \"Workbench_SCHEDULE\"\n\n\nsource\n\n\n\n ActivityLog_ObjectType (value, names=None, module=None, qualname=None,\n                         type=None, start=1)\n\nenumerates valid object types to pass to activity log api\n\n\n\n\n\n DomoActivityLog ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nimport datetime as dt\n\nend_datetime = dt.datetime.today()\nstart_datetime = end_datetime - dt.timedelta(days=100)\n\ntoken_auth = dmda.DomoTokenAuth(domo_instance='domo-dojo',\n                                    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"])\n\nDomoActivityLog.get_activity_log(\n    auth = token_auth,\n    start_time = start_datetime,\n    end_time = end_datetime,\n    object_type = ActivityLog_ObjectType.BEAST_MODE_FORMULA,\n    maximum =10,\n    session: Optional[aiohttp.ClientSession]=None,\n    debug_api: bool=False,\n    debug_loop: bool=False,\n)"
  }
]