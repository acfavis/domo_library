# | export

@patch_to(GetInstanceConfig, cls_method=True)
async def get_domains_with_instance_auth(cls: GetInstanceConfig,
                                         config_dataset_id: str,
                                         config_auth: dmda.DomoAuth,  # which instance to retrieve configuration data from
                                         pa_auth: dmda.DomoAuth,
                                         pa_test_auth: dmda.DomoAuth,
                                         other_auth: dmda.DomoAuth,
                                         other_test_auth: dmda.DomoAuth,
                                         sql: str = "select domain as domo_instance,config_useprod, project from table",
                                         debug_api: bool = False,
                                         debug_log: bool = False,
                                         debug_prn: bool = False,
                                         logger: lc.Logger = None) -> pd.DataFrame:
    if not logger:
        logger = lc.Logger(app_name='get_domains_with_instance_auth')

    gic = cls(logger=logger)

    df = await gic._retrieve_company_ds(config_auth=config_auth,
                                        dataset_id=config_dataset_id,
                                        sql=sql,
                                        debug_prn=debug_prn,
                                        debug_log=debug_log,
                                        debug_api=debug_api)


    for index, instance in df.iterrows():
        try:
            creds = other_auth

            if instance['project'] == 'pa' and instance['config_useprod'] == 1:
                creds = pa_auth
            elif instance['project'] == 'pa' and instance['config_useprod'] == 0:
                creds = pa_test_auth
            elif instance['project'] == 'other' and instance['config_useprod'] == 0:
                creds = other_test_auth

            full_auth = dmda.DomoFullAuth(domo_instance=instance['domo_instance'],
                                          domo_username=creds.domo_username,
                                          domo_password=creds.domo_password,
                                          token_name='instance'
                                          )
            try:
                await full_auth.get_auth_token(debug=False)

            except dmda.InvalidCredentialsError as e:
                print(e)
                if logger:
                    logger.log_error(
                        f"Error with Invalid Credentials {instance} instance. Exception : {e}")

            df.at[index, 'instance_auth'] = full_auth
            is_valid = 1 if (full_auth.token) else 0
            df.at[index, 'is_valid'] = is_valid
            if logger:
                logger.log_info(f"{instance} has {is_valid} valid token")

        except Exception as e:
            print(e)
            if logger:
                logger.log_error(
                    f"Error with {instance} instance. Exception : {e}")

    return df
