#| export

@patch_to(DomoUsers, cls_method=True)
def util_match_domo_users_to_emails(cls: DomoUsers, domo_users: list,
                                    user_email_ls: List[str]) -> list:
    """pass in an array of user emails to match against an array of Domo User"""

    matches = []
    for idx, email in enumerate(user_email_ls):
        match_user = next((
            domo_user
            for domo_user in domo_users
            if email.lower() == domo_user.email_address.lower()
        ), None)
        if match_user:
            matches.append(match_user)
    return matches


@patch_to(DomoUsers, cls_method=True)
def util_match_users_obj_to_emails(cls: DomoUsers, user_ls: list,
                                   user_email_ls: List[str]) -> list:
    """pass in an array of user emails to match against an array of Domo User"""

    matches = []
    for idx, email in enumerate(user_email_ls):
        match_user = next((
            user_obj for user_obj in user_ls
            if email.lower() == user_obj.get('emailAddress').lower()
        ), None)
        if match_user:
            matches.append(match_user)
    return matches

    
@patch_to(DomoUsers, cls_method = True)
async def by_email(
    cls : DomoUsers,
    user_email_ls: list,
    auth: dmda.DomoAuth,
    only_allow_one: bool = True,
    debug_api: bool = False,
    return_raw : bool = False
) -> list:

    body = user_routes.generate_search_users_body_by_email(
        user_email_ls=user_email_ls)

    res = await user_routes.search_users(
        body=body, 
        auth=auth, 
        process_users = False,
        debug_api = debug_api
    )

    if return_raw:
        if only_allow_one:
            res.response = cls.util_match_users_obj_to_emails(
                res.response.get('users'), user_email_ls)[0]
        return res

    if res.status != 200:
        return None

    user_ls = res.response.get("users")
    
    domo_users = cls._users_to_domo_user(user_ls, auth=auth)

    if only_allow_one:
        return cls.util_match_domo_users_to_emails(
            domo_users, user_email_ls)[0]

    return domo_users