# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/routes/50_activity_log.ipynb.

# %% auto 0
__all__ = ['ActivityLog_ObjectType', 'search_activity_log']

# %% ../../nbs/routes/50_activity_log.ipynb 2
from pprint import pprint

from enum import Enum, auto
from typing import Optional

import aiohttp

import domolibrary.client.get_data as gd

import domolibrary.DomoAuth as dmda
import domolibrary.client.ResponseGetData as rgd


# %% ../../nbs/routes/50_activity_log.ipynb 6
class ActivityLog_ObjectType(Enum):
    ACCESS_TOKEN = 'ACCESS_TOKEN'
    ACCOUNT = 'ACCOUNT'
    ACTIVITY_LOG = 'ACTIVITY_LOG'
    ALERT = 'ALERT'
    APP = 'APP'
    APPDB_COLLECTION = 'MAGNUM_COLLECTION'
    APPDB_DATASTORE = 'MAGNUM_DATASTORE'
    AUTHORITY = 'AUTHORITY'
    BEAST_MODE_FORMULA = 'BEAST_MODE_FORMULA'
    BUZZ_CHANNEL = 'CHANNEL'
    BUZZ_GROUP_CHAT = 'GROUP_CHAT'
    BUZZ_THREAD = 'HUDDLE'
    CARD = 'CARD'
    CHART_COLOR_PALETTE = 'CHART_COLOR_PALETTE'
    COLLECTION = 'COLLECTION'
    CUSTOMER = 'CUSTOMER'
    CUSTOMER_STATE = 'CUSTOMER_STATE'
    CUSTOMER_TIER = 'CUSTOMER_TIER'
    DATA_SCIENCE_NOTEBOOK = 'DATA_SCIENCE_NOTEBOOK'
    DATAFLOW = 'DATAFLOW_TYPE'
    DATASET = 'DATA_SOURCE'
    DATASOURCE = 'DATASOURCE'
    DEPLOYMENT = 'DEPLOYMENT'
    DRILL_VIEW = 'DRILL_VIEW'
    EASY_INVITE_LINK = 'EASY_INVITE_LINK'
    ENABLED = 'ENABLED'
    FILE = 'FILE'
    FILE_VERSION = 'FILE_REVISION'
    GROUP = 'GROUP'
    LICENSE_PAGE = 'LICENSE_PAGE'
    LOGIN_SETTINGS = 'LOGIN_SETTINGS'
    NAME = 'NAME'
    PDP_FILTER = 'ADC_FILTER'
    PDP_POLICY = 'ADC_POLICY'
    PAGE = 'PAGE'
    PAGE_ANALYZER = 'PAGE_ANALYZER'
    PAGE_COLLECTION = 'PAGE_COLLECTION'
    PROJECT = 'PROJECT'
    PROJECT_LIST = 'PROJECT_LIST'
    PROJECT_TASK = 'PROJECT_TASK'
    PROJECT_TASK_ATTACHMENT = 'PROJECT_TASK_ATTACHMENT'
    PROJECT_TASK_OWNER = 'PROJECT_TASK_OWNER'
    PROXIER_EMAIL = 'PROXIER_EMAIL'
    PUBLIC_EMBED_URL = 'PUBLIC_URL'
    PUBLICATION = 'PUBLICATION'
    REPOSITORY = 'REPOSITORY'
    REPOSITORY_AUTHORIZATION = 'REPOSITORY_AUTHORIZATION'
    ROLE = 'ROLE'
    SEGMENT = 'SEGMENT'
    SSO_PAGE = 'SSO_PAGE'
    SUBSCRIBER = 'PROXY_USER'
    USER = 'USER'
    USER_STATE = 'USER_STATE'
    VARIABLE = 'VARIABLE'
    VARIABLE_CONTROL = 'VARIABLE_CONTROL'
    NOTEBOOK_VIEW = 'CONTAINER_VIEW'
    VIEW = 'VIEW'
    VIRTUAL_USER = 'VIRTUAL_USER'
    WORKBENCH_AGENT = 'Workbench_AGENT'
    WORKBENCH_JOB = 'Workbench_JOB'
    WORKBENCH_SCHEDULE = 'Workbench_SCHEDULE'

# %% ../../nbs/routes/50_activity_log.ipynb 7
async def search_activity_log(domo_auth: dmda.DomoAuth,
                              start_time: int,  # epoch time in milliseconds
                              end_time: int,  # epoch time in milliseconds
                              maximum: int,
                              object_type: Optional[ActivityLog_ObjectType] = None,
                              session: aiohttp.ClientSession = None,
                              debug_api: bool = False,
                              debug_loop: bool = False):
    is_close_session = False

    if not session:
        session = aiohttp.ClientSession()
        is_close_session = True

    url = f'https://{domo_auth.domo_instance}.domo.com/api/audit/v1/user-audits'

    if object_type and object_type != ActivityLog_ObjectType.ACTIVITY_LOG:
        url = f"{url}/objectTypes/{object_type.value}"

    fixed_params = {
        'end': end_time,
        'start': start_time
    }

    offset_params = {
        'offset': 'offset',
        'limit': 'limit',
    }

    def arr_fn(res) -> list[dict]:
        return res.response

    res = await gd.looper(auth=domo_auth,
                          method='GET',
                          url=url,
                          arr_fn=arr_fn,
                          fixed_params=fixed_params,
                          offset_params=offset_params,
                          session=session,
                          maximum=maximum,
                          debug_loop=debug_loop,
                          debug_api=debug_api)

    if is_close_session:
        await session.close()

    return res
