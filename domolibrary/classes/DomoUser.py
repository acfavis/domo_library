# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/classes/50_DomoUser.ipynb.

# %% auto 0
__all__ = ['DomoUser', 'DomoUsers']

# %% ../../nbs/classes/50_DomoUser.ipynb 2
from fastcore.basics import patch, patch_to


# %% ../../nbs/classes/50_DomoUser.ipynb 3
from dataclasses import dataclass, field
from typing import List, Optional

import domolibrary.utils.DictDot as util_dd
import domolibrary.client.DomoAuth as dmda
import domolibrary.client.Logger as lc
import domolibrary.routes.user as user_routes

# %% ../../nbs/classes/50_DomoUser.ipynb 4
@dataclass
class DomoUser:
    id: str
    display_name: str = None
    email_address: str = None
    role_id: str = None

    publisher_domain: str = None
    subscriber_domain: str = None
    virtual_user_id: str = None

    auth: Optional[dmda.DomoAuth] = field(repr=False, default=None)

    @classmethod
    def _from_search_json(cls, auth, user_obj):
        user_dd = util_dd.DictDot(user_obj)

        return cls(
            auth=auth,
            id=str(user_dd.id) or str(user_dd.userId),
            display_name=user_dd.displayName,
            email_address=user_dd.emailAddress,
            role_id=user_dd.roleId
        )

    @classmethod
    def _from_virtual_json(cls, auth, user_obj):
        user_dd = util_dd.DictDot(user_obj)

        return cls(
            id=user_dd.id,
            auth=auth,
            publisher_domain=user_dd.publisherDomain,
            subscriber_domain=user_dd.subscriberDomain,
            virtual_user_id=user_dd.virtualUserId
        )

# %% ../../nbs/classes/50_DomoUser.ipynb 8
@dataclass
class DomoUsers:
    logger : Optional[lc.Logger] = None

    def _users_to_domo_user(user_ls, auth: dmda.DomoAuth):
        domo_users = []
        for user_obj in user_ls:
            user = DomoUser._from_search_json(auth=auth, user_obj=user_obj)
            domo_users.append(user)

        return domo_users

    def _users_to_virtual_user(user_ls, auth: dmda.DomoAuth):
        domo_users = []
        for user_obj in user_ls:
            user = DomoUser._from_virtual_json(auth=auth, user_obj=user_obj)
            domo_users.append(user)

        return domo_users

    def _generate_logger(self, logger : Optional[lc.Logger] = None):
        self.logger = logger or self.logger or lc.loger()

